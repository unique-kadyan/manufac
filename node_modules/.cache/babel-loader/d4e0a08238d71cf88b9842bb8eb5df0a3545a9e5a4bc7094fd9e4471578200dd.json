{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatasetAnalyzer = () => {\n  _s();\n  const [dataset, setDataset] = useState([]);\n  const [classStats, setClassStats] = useState({});\n  useEffect(() => {\n    // Load the JSON dataset\n    fetch('../dataset.json').then(response => response.json()).then(data => setDataset(data));\n  }, []);\n  useEffect(() => {\n    if (dataset.length > 0) {\n      const stats = calculateStats(dataset);\n      setClassStats(stats);\n    }\n  }, [dataset]);\n  const calculateStats = data => {\n    // Initialize an object to store the class-wise statistics\n    const classStats = {};\n\n    // Iterate through the dataset and calculate statistics\n    data.forEach(item => {\n      const alcoholClass = item.Alcohol;\n      const flavanoids = item.Flavanoids;\n      if (!classStats[alcoholClass]) {\n        classStats[alcoholClass] = [];\n      }\n      classStats[alcoholClass].push(flavanoids);\n    });\n\n    // Calculate class-wise mean, median, and mode\n    for (const alcoholClass in classStats) {\n      const values = classStats[alcoholClass];\n\n      // Calculate mean\n      const mean = values.reduce((acc, val) => acc + val, 0) / values.length;\n      classStats[alcoholClass].mean = mean;\n\n      // Calculate median\n      values.sort((a, b) => a - b);\n      const median = values.length % 2 === 0 ? (values[values.length / 2 - 1] + values[values.length / 2]) / 2 : values[Math.floor(values.length / 2)];\n      classStats[alcoholClass].median = median;\n\n      // Calculate mode\n      const modeMap = {};\n      let maxCount = 0;\n      let mode = null;\n      values.forEach(val => {\n        modeMap[val] = (modeMap[val] || 0) + 1;\n        if (modeMap[val] > maxCount) {\n          maxCount = modeMap[val];\n          mode = val;\n        }\n      });\n      classStats[alcoholClass].mode = mode;\n    }\n    return classStats;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: `Class ${alcoholClass}`\n          }, alcoholClass, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].mean\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].median\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].mode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)]\n          }, alcoholClass, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(DatasetAnalyzer, \"3MdRw21qYmhDUEIxZxo22sn9rjY=\");\n_c = DatasetAnalyzer;\nexport default DatasetAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"DatasetAnalyzer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DatasetAnalyzer","_s","dataset","setDataset","classStats","setClassStats","fetch","then","response","json","data","length","stats","calculateStats","forEach","item","alcoholClass","Alcohol","flavanoids","Flavanoids","push","values","mean","reduce","acc","val","sort","a","b","median","Math","floor","modeMap","maxCount","mode","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","Fragment","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst DatasetAnalyzer = () => {\r\n  const [dataset, setDataset] = useState([]);\r\n  const [classStats, setClassStats] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Load the JSON dataset\r\n    fetch('../dataset.json')\r\n      .then((response) => response.json())\r\n      .then((data) => setDataset(data));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (dataset.length > 0) {\r\n      const stats = calculateStats(dataset);\r\n      setClassStats(stats);\r\n    }\r\n  }, [dataset]);\r\n\r\n  const calculateStats = (data) => {\r\n    // Initialize an object to store the class-wise statistics\r\n    const classStats = {};\r\n\r\n    // Iterate through the dataset and calculate statistics\r\n    data.forEach((item) => {\r\n      const alcoholClass = item.Alcohol;\r\n      const flavanoids = item.Flavanoids;\r\n\r\n      if (!classStats[alcoholClass]) {\r\n        classStats[alcoholClass] = [];\r\n      }\r\n\r\n      classStats[alcoholClass].push(flavanoids);\r\n    });\r\n\r\n    // Calculate class-wise mean, median, and mode\r\n    for (const alcoholClass in classStats) {\r\n      const values = classStats[alcoholClass];\r\n\r\n      // Calculate mean\r\n      const mean = values.reduce((acc, val) => acc + val, 0) / values.length;\r\n      classStats[alcoholClass].mean = mean;\r\n\r\n      // Calculate median\r\n      values.sort((a, b) => a - b);\r\n      const median =\r\n        values.length % 2 === 0\r\n          ? (values[values.length / 2 - 1] + values[values.length / 2]) / 2\r\n          : values[Math.floor(values.length / 2)];\r\n      classStats[alcoholClass].median = median;\r\n\r\n      // Calculate mode\r\n      const modeMap = {};\r\n      let maxCount = 0;\r\n      let mode = null;\r\n      values.forEach((val) => {\r\n        modeMap[val] = (modeMap[val] || 0) + 1;\r\n        if (modeMap[val] > maxCount) {\r\n          maxCount = modeMap[val];\r\n          mode = val;\r\n        }\r\n      });\r\n      classStats[alcoholClass].mode = mode;\r\n    }\r\n\r\n    return classStats;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {Object.keys(classStats).map((alcoholClass) => (\r\n              <th key={alcoholClass}>{`Class ${alcoholClass}`}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {Object.keys(classStats).map((alcoholClass) => (\r\n              <React.Fragment key={alcoholClass}>\r\n                <td>{classStats[alcoholClass].mean}</td>\r\n                <td>{classStats[alcoholClass].median}</td>\r\n                <td>{classStats[alcoholClass].mode}</td>\r\n              </React.Fragment>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatasetAnalyzer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}