{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport data from '../dataset.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FlavanoidsStats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      classStats: []\n    };\n  }\n  componentDidMount() {\n    const classes = [...new Set(data.map(item => item.Alcohol))];\n    const classStats = classes.map(cls => {\n      const flavanoids = data.filter(item => item.Alcohol === cls).map(item => item.Flavanoids);\n      const mean = flavanoids.reduce((a, b) => a + b, 0) / flavanoids.length;\n      const sorted = flavanoids.sort();\n      const median = sorted.length % 2 === 0 ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2 : sorted[Math.floor(sorted.length / 2)];\n      const modeMap = {};\n      let maxCount = 1;\n      let mode = sorted[0];\n      for (let i = 0; i < sorted.length; i++) {\n        let num = sorted[i];\n        if (modeMap[num]) {\n          modeMap[num]++;\n        } else {\n          modeMap[num] = 1;\n        }\n        if (modeMap[num] > maxCount) {\n          mode = num;\n          maxCount = modeMap[num];\n        }\n      }\n      return {\n        class: cls,\n        mean: mean,\n        median: median,\n        mode: mode\n      };\n    });\n    this.setState({\n      classStats: classStats\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), this.state.classStats.map(stat => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: stat.class\n          }, stat.class, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 48\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), this.state.classStats.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: stat.mean.toFixed(2)\n          }, stat.class, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 48\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), this.state.classStats.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: stat.median.toFixed(2)\n          }, stat.class, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 48\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), this.state.classStats.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: stat.mode.toFixed(2)\n          }, stat.class, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 48\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FlavanoidsStats;","map":{"version":3,"names":["React","data","jsxDEV","_jsxDEV","FlavanoidsStats","Component","constructor","props","state","classStats","componentDidMount","classes","Set","map","item","Alcohol","cls","flavanoids","filter","Flavanoids","mean","reduce","a","b","length","sorted","sort","median","Math","floor","modeMap","maxCount","mode","i","num","class","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","stat","toFixed"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\nimport data from '../dataset.json';\r\n\r\nclass FlavanoidsStats extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      classStats: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const classes = [...new Set(data.map(item => item.Alcohol))];\r\n    const classStats = classes.map(cls => {\r\n      const flavanoids = data.filter(item => item.Alcohol === cls)\r\n                              .map(item => item.Flavanoids);\r\n      const mean = flavanoids.reduce((a, b) => a + b, 0) / flavanoids.length;\r\n      const sorted = flavanoids.sort();\r\n      const median = sorted.length % 2 === 0 ? (sorted[sorted.length/2 - 1] + sorted[sorted.length/2]) / 2 : sorted[Math.floor(sorted.length/2)];\r\n      const modeMap = {};\r\n      let maxCount = 1;\r\n      let mode = sorted[0];\r\n      for(let i = 0; i < sorted.length; i++) {\r\n        let num = sorted[i];\r\n        if(modeMap[num]) {\r\n          modeMap[num]++;\r\n        } else {\r\n          modeMap[num] = 1;\r\n        }\r\n        if(modeMap[num] > maxCount) {\r\n          mode = num;\r\n          maxCount = modeMap[num];\r\n        }\r\n      }\r\n      return {class: cls, mean: mean, median: median, mode: mode};\r\n    });\r\n    this.setState({classStats: classStats});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {this.state.classStats.map(stat => <th key={stat.class}>{stat.class}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {this.state.classStats.map(stat => <td key={stat.class}>{stat.mean.toFixed(2)}</td>)}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {this.state.classStats.map(stat => <td key={stat.class}>{stat.median.toFixed(2)}</td>)}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {this.state.classStats.map(stat => <td key={stat.class}>{stat.mode.toFixed(2)}</td>)}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlavanoidsStats;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}