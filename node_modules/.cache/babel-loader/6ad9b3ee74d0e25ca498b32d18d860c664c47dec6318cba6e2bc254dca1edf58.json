{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateMean = arr => {\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  return sum / arr.length;\n};\n\n// Function to calculate the median of a given array of numbers\nconst calculateMedian = arr => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedArr.length / 2);\n  if (sortedArr.length % 2 === 0) {\n    const leftValue = sortedArr[middleIndex - 1];\n    const rightValue = sortedArr[middleIndex];\n    return (leftValue + rightValue) / 2;\n  } else {\n    return sortedArr[middleIndex];\n  }\n};\n\n// Function to calculate the mode of a given array of numbers\nconst calculateMode = arr => {\n  const modeMap = {};\n\n  // Count the frequency of each value in the array\n  arr.forEach(value => {\n    if (!modeMap[value]) {\n      modeMap[value] = 1;\n    } else {\n      modeMap[value]++;\n    }\n  });\n  let maxFrequency = 0;\n  let modes = [];\n\n  // Find the value(s) with the highest frequency\n  for (const value in modeMap) {\n    const frequency = modeMap[value];\n    if (frequency > maxFrequency) {\n      maxFrequency = frequency;\n      modes = [value];\n    } else if (frequency === maxFrequency) {\n      modes.push(value);\n    }\n  }\n\n  // If all values appear the same number of times, there is no mode\n  if (maxFrequency === 1) {\n    modes = [];\n  }\n  return modes;\n};\n\n// Function to calculate the class-wise mean, median, and mode of Flavanoids for the entire JSON dataset\nconst calculateClassStats = jsonData => {\n  const flavanoidsByClass = {};\n  const classes = [];\n\n  // Group the flavanoids by class\n  jsonData.forEach(entry => {\n    const alcoholClass = entry.Alcohol;\n    const flavanoidsValue = entry.Flavanoids;\n    if (!flavanoidsByClass[alcoholClass]) {\n      flavanoidsByClass[alcoholClass] = [flavanoidsValue];\n      classes.push(alcoholClass);\n    } else {\n      flavanoidsByClass[alcoholClass].push(flavanoidsValue);\n    }\n  });\n\n  // Calculate the mean, median, and mode for each class\n  const statsByClass = classes.map(alcoholClass => {\n    const flavanoidsForClass = flavanoidsByClass[alcoholClass];\n    const mean = calculateMean(flavanoidsForClass);\n    const median = calculateMedian(flavanoidsForClass);\n    const mode = calculateMode(flavanoidsForClass);\n    return {\n      alcoholClass,\n      mean,\n      median,\n      mode\n    };\n  });\n  return statsByClass;\n};\nconst FlavanoidsStats = _ref => {\n  let {\n    jsonData\n  } = _ref;\n  const statsByClass = calculateClassStats(jsonData);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), statsByClass.map(stat => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", stat.alcoholClass]\n        }, stat.alcoholClass, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), statsByClass.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stat.mean.toFixed(2)\n        }, stat.alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), statsByClass.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stat.median.toFixed(2)\n        }, stat.alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), statsByClass.map(stat => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stat.mode.length > 0 ? stat.mode.join(\", \") : \"-\"\n        }, stat.alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_c = FlavanoidsStats;\nexport default FlavanoidsStats;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsStats\");","map":{"version":3,"names":["calculateMean","arr","sum","reduce","acc","val","length","calculateMedian","sortedArr","sort","a","b","middleIndex","Math","floor","leftValue","rightValue","calculateMode","modeMap","forEach","value","maxFrequency","modes","frequency","push","calculateClassStats","jsonData","flavanoidsByClass","classes","entry","alcoholClass","Alcohol","flavanoidsValue","Flavanoids","statsByClass","map","flavanoidsForClass","mean","median","mode","FlavanoidsStats","_ref","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","stat","toFixed","join","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["const calculateMean = (arr) => {\r\n  const sum = arr.reduce((acc, val) => acc + val, 0);\r\n  return sum / arr.length;\r\n};\r\n\r\n// Function to calculate the median of a given array of numbers\r\nconst calculateMedian = (arr) => {\r\n  const sortedArr = arr.sort((a, b) => a - b);\r\n  const middleIndex = Math.floor(sortedArr.length / 2);\r\n\r\n  if (sortedArr.length % 2 === 0) {\r\n    const leftValue = sortedArr[middleIndex - 1];\r\n    const rightValue = sortedArr[middleIndex];\r\n    return (leftValue + rightValue) / 2;\r\n  } else {\r\n    return sortedArr[middleIndex];\r\n  }\r\n};\r\n\r\n// Function to calculate the mode of a given array of numbers\r\nconst calculateMode = (arr) => {\r\n  const modeMap = {};\r\n\r\n  // Count the frequency of each value in the array\r\n  arr.forEach((value) => {\r\n    if (!modeMap[value]) {\r\n      modeMap[value] = 1;\r\n    } else {\r\n      modeMap[value]++;\r\n    }\r\n  });\r\n\r\n  let maxFrequency = 0;\r\n  let modes = [];\r\n\r\n  // Find the value(s) with the highest frequency\r\n  for (const value in modeMap) {\r\n    const frequency = modeMap[value];\r\n    if (frequency > maxFrequency) {\r\n      maxFrequency = frequency;\r\n      modes = [value];\r\n    } else if (frequency === maxFrequency) {\r\n      modes.push(value);\r\n    }\r\n  }\r\n\r\n  // If all values appear the same number of times, there is no mode\r\n  if (maxFrequency === 1) {\r\n    modes = [];\r\n  }\r\n\r\n  return modes;\r\n};\r\n\r\n// Function to calculate the class-wise mean, median, and mode of Flavanoids for the entire JSON dataset\r\nconst calculateClassStats = (jsonData) => {\r\n  const flavanoidsByClass = {};\r\n  const classes = [];\r\n\r\n  // Group the flavanoids by class\r\n  jsonData.forEach((entry) => {\r\n    const alcoholClass = entry.Alcohol;\r\n    const flavanoidsValue = entry.Flavanoids;\r\n\r\n    if (!flavanoidsByClass[alcoholClass]) {\r\n      flavanoidsByClass[alcoholClass] = [flavanoidsValue];\r\n      classes.push(alcoholClass);\r\n    } else {\r\n      flavanoidsByClass[alcoholClass].push(flavanoidsValue);\r\n    }\r\n  });\r\n\r\n  // Calculate the mean, median, and mode for each class\r\n  const statsByClass = classes.map((alcoholClass) => {\r\n    const flavanoidsForClass = flavanoidsByClass[alcoholClass];\r\n    const mean = calculateMean(flavanoidsForClass);\r\n    const median = calculateMedian(flavanoidsForClass);\r\n    const mode = calculateMode(flavanoidsForClass);\r\n    return { alcoholClass, mean, median, mode };\r\n  });\r\n\r\n  return statsByClass;\r\n};\r\n\r\nconst FlavanoidsStats = ({ jsonData }) => {\r\n  const statsByClass = calculateClassStats(jsonData);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {statsByClass.map((stat) => (\r\n            <th key={stat.alcoholClass}>Class {stat.alcoholClass}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {statsByClass.map((stat) => (\r\n            <td key={stat.alcoholClass}>{stat.mean.toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {statsByClass.map((stat) => (\r\n            <td key={stat.alcoholClass}>{stat.median.toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {statsByClass.map((stat) => (\r\n            <td key={stat.alcoholClass}>\r\n              {stat.mode.length > 0 ? stat.mode.join(\", \") : \"-\"}\r\n            </td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\nexport default FlavanoidsStats;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}