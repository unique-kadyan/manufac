{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\n// Assuming the JSON dataset is stored in a variable called \"data\"\nimport data from '../dataset.json';\n// Function to calculate the mean\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculateMean(values) {\n  const sum = values.reduce((acc, val) => acc + val, 0);\n  return sum / values.length;\n}\n\n// Function to calculate the median\nfunction calculateMedian(values) {\n  const sortedValues = values.sort((a, b) => a - b);\n  const mid = Math.floor(sortedValues.length / 2);\n  if (sortedValues.length % 2 === 0) {\n    return (sortedValues[mid - 1] + sortedValues[mid]) / 2;\n  } else {\n    return sortedValues[mid];\n  }\n}\n\n// Function to calculate the mode\nfunction calculateMode(values) {\n  const frequencies = {};\n  let mode = null;\n  let maxFrequency = 0;\n  values.forEach(value => {\n    frequencies[value] = (frequencies[value] || 0) + 1;\n    if (frequencies[value] > maxFrequency) {\n      mode = value;\n      maxFrequency = frequencies[value];\n    }\n  });\n  return mode;\n}\n\n// Function to calculate class-wise statistics\nfunction calculateClassStatistics(data) {\n  const classes = {};\n  data.forEach(item => {\n    const alcoholClass = item.Alcohol;\n    const flavanoidsValue = item.Flavanoids;\n    if (!classes[alcoholClass]) {\n      classes[alcoholClass] = [];\n    }\n    classes[alcoholClass].push(flavanoidsValue);\n  });\n  const statistics = {};\n  Object.keys(classes).forEach(alcoholClass => {\n    const flavanoidsValues = classes[alcoholClass];\n    statistics[alcoholClass] = {\n      mean: calculateMean(flavanoidsValues),\n      median: calculateMedian(flavanoidsValues),\n      mode: calculateMode(flavanoidsValues)\n    };\n  });\n  return statistics;\n}\n\n// Usage example\nconst statistics = calculateClassStatistics(data);\n\n// Rendering the table in React component\nfunction FlavanoidsStatisticsTable(_ref) {\n  let {\n    statistics\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), Object.keys(statistics).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", alcoholClass]\n        }, alcoholClass, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), Object.keys(statistics).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: statistics[alcoholClass].mean\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), Object.keys(statistics).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: statistics[alcoholClass].median\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), Object.keys(statistics).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: statistics[alcoholClass].mode\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_c = FlavanoidsStatisticsTable;\nexport default FlavanoidsStatisticsTable;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsStatisticsTable\");","map":{"version":3,"names":["data","jsxDEV","_jsxDEV","calculateMean","values","sum","reduce","acc","val","length","calculateMedian","sortedValues","sort","a","b","mid","Math","floor","calculateMode","frequencies","mode","maxFrequency","forEach","value","calculateClassStatistics","classes","item","alcoholClass","Alcohol","flavanoidsValue","Flavanoids","push","statistics","Object","keys","flavanoidsValues","mean","median","FlavanoidsStatisticsTable","_ref","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["// Assuming the JSON dataset is stored in a variable called \"data\"\r\nimport data from '../dataset.json';\r\n// Function to calculate the mean\r\nfunction calculateMean(values) {\r\n  const sum = values.reduce((acc, val) => acc + val, 0);\r\n  return sum / values.length;\r\n}\r\n\r\n// Function to calculate the median\r\nfunction calculateMedian(values) {\r\n  const sortedValues = values.sort((a, b) => a - b);\r\n  const mid = Math.floor(sortedValues.length / 2);\r\n  if (sortedValues.length % 2 === 0) {\r\n    return (sortedValues[mid - 1] + sortedValues[mid]) / 2;\r\n  } else {\r\n    return sortedValues[mid];\r\n  }\r\n}\r\n\r\n// Function to calculate the mode\r\nfunction calculateMode(values) {\r\n  const frequencies = {};\r\n  let mode = null;\r\n  let maxFrequency = 0;\r\n\r\n  values.forEach((value) => {\r\n    frequencies[value] = (frequencies[value] || 0) + 1;\r\n\r\n    if (frequencies[value] > maxFrequency) {\r\n      mode = value;\r\n      maxFrequency = frequencies[value];\r\n    }\r\n  });\r\n\r\n  return mode;\r\n}\r\n\r\n// Function to calculate class-wise statistics\r\nfunction calculateClassStatistics(data) {\r\n  const classes = {};\r\n\r\n  data.forEach((item) => {\r\n    const alcoholClass = item.Alcohol;\r\n    const flavanoidsValue = item.Flavanoids;\r\n\r\n    if (!classes[alcoholClass]) {\r\n      classes[alcoholClass] = [];\r\n    }\r\n\r\n    classes[alcoholClass].push(flavanoidsValue);\r\n  });\r\n\r\n  const statistics = {};\r\n\r\n  Object.keys(classes).forEach((alcoholClass) => {\r\n    const flavanoidsValues = classes[alcoholClass];\r\n\r\n    statistics[alcoholClass] = {\r\n      mean: calculateMean(flavanoidsValues),\r\n      median: calculateMedian(flavanoidsValues),\r\n      mode: calculateMode(flavanoidsValues),\r\n    };\r\n  });\r\n\r\n  return statistics;\r\n}\r\n\r\n// Usage example\r\nconst statistics = calculateClassStatistics(data);\r\n\r\n// Rendering the table in React component\r\nfunction FlavanoidsStatisticsTable({ statistics }) {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {Object.keys(statistics).map((alcoholClass) => (\r\n            <th key={alcoholClass}>Class {alcoholClass}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {Object.keys(statistics).map((alcoholClass) => (\r\n            <td key={alcoholClass}>{statistics[alcoholClass].mean}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {Object.keys(statistics).map((alcoholClass) => (\r\n            <td key={alcoholClass}>{statistics[alcoholClass].median}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {Object.keys(statistics).map((alcoholClass) => (\r\n            <td key={alcoholClass}>{statistics[alcoholClass].mode}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default FlavanoidsStatisticsTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}