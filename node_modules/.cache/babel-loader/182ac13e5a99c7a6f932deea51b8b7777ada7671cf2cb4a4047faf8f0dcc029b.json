{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlavanoidsStatsTable = () => {\n  _s();\n  const [dataset, setDataset] = useState([]);\n  const [classStats, setClassStats] = useState({});\n  useEffect(() => {\n    // Function to fetch and load the JSON dataset\n    const fetchDataset = async () => {\n      try {\n        const response = await fetch('./data.json'); // Replace with the actual path to your JSON dataset file\n        const data = await response.json();\n        setDataset(data);\n      } catch (error) {\n        console.error('Error loading dataset:', error);\n      }\n    };\n    fetchDataset();\n  }, []);\n  useEffect(() => {\n    // Function to calculate the class-wise mean, median, and mode of Flavanoids\n    const calculateStats = () => {\n      const stats = {};\n\n      // Iterate over the dataset and calculate stats for each alcohol class\n      dataset.forEach(entry => {\n        const alcoholClass = entry.Alcohol;\n        const flavanoids = entry.Flavanoids;\n        if (!stats[alcoholClass]) {\n          stats[alcoholClass] = {\n            mean: [flavanoids],\n            median: [flavanoids],\n            mode: {\n              [flavanoids]: 1\n            }\n          };\n        } else {\n          stats[alcoholClass].mean.push(flavanoids);\n          stats[alcoholClass].median.push(flavanoids);\n          stats[alcoholClass].mode[flavanoids] = (stats[alcoholClass].mode[flavanoids] || 0) + 1;\n        }\n      });\n\n      // Calculate mean, median, and mode for each alcohol class\n      for (const alcoholClass in stats) {\n        const classStats = stats[alcoholClass];\n\n        // Calculate mean\n        const meanSum = classStats.mean.reduce((sum, value) => sum + value, 0);\n        classStats.mean = (meanSum / classStats.mean.length).toFixed(2);\n\n        // Calculate median\n        classStats.median.sort((a, b) => a - b);\n        const medianIndex = Math.floor(classStats.median.length / 2);\n        if (classStats.median.length % 2 === 0) {\n          classStats.median = ((classStats.median[medianIndex - 1] + classStats.median[medianIndex]) / 2).toFixed(2);\n        } else {\n          classStats.median = classStats.median[medianIndex].toFixed(2);\n        }\n\n        // Calculate mode\n        let mode = null;\n        let maxCount = 0;\n        for (const flavanoids in classStats.mode) {\n          if (classStats.mode[flavanoids] > maxCount) {\n            mode = flavanoids;\n            maxCount = classStats.mode[flavanoids];\n          }\n        }\n        classStats.mode = mode ? mode.toFixed(2) : 'N/A';\n      }\n      setClassStats(stats);\n    };\n    calculateStats();\n  }, [dataset]);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: alcoholClass\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classStats[alcoholClass].mean\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classStats[alcoholClass].median\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classStats[alcoholClass].mode\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(FlavanoidsStatsTable, \"3MdRw21qYmhDUEIxZxo22sn9rjY=\");\n_c = FlavanoidsStatsTable;\nexport default FlavanoidsStatsTable;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsStatsTable\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","FlavanoidsStatsTable","_s","dataset","setDataset","classStats","setClassStats","fetchDataset","response","fetch","data","json","error","console","calculateStats","stats","forEach","entry","alcoholClass","Alcohol","flavanoids","Flavanoids","mean","median","mode","push","meanSum","reduce","sum","value","length","toFixed","sort","a","b","medianIndex","Math","floor","maxCount","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst FlavanoidsStatsTable = () => {\r\n  const [dataset, setDataset] = useState([]);\r\n  const [classStats, setClassStats] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Function to fetch and load the JSON dataset\r\n    const fetchDataset = async () => {\r\n      try {\r\n        const response = await fetch('./data.json'); // Replace with the actual path to your JSON dataset file\r\n        const data = await response.json();\r\n        setDataset(data);\r\n      } catch (error) {\r\n        console.error('Error loading dataset:', error);\r\n      }\r\n    };\r\n\r\n    fetchDataset();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Function to calculate the class-wise mean, median, and mode of Flavanoids\r\n    const calculateStats = () => {\r\n      const stats = {};\r\n\r\n      // Iterate over the dataset and calculate stats for each alcohol class\r\n      dataset.forEach(entry => {\r\n        const alcoholClass = entry.Alcohol;\r\n        const flavanoids = entry.Flavanoids;\r\n\r\n        if (!stats[alcoholClass]) {\r\n          stats[alcoholClass] = {\r\n            mean: [flavanoids],\r\n            median: [flavanoids],\r\n            mode: { [flavanoids]: 1 },\r\n          };\r\n        } else {\r\n          stats[alcoholClass].mean.push(flavanoids);\r\n          stats[alcoholClass].median.push(flavanoids);\r\n          stats[alcoholClass].mode[flavanoids] = (stats[alcoholClass].mode[flavanoids] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      // Calculate mean, median, and mode for each alcohol class\r\n      for (const alcoholClass in stats) {\r\n        const classStats = stats[alcoholClass];\r\n\r\n        // Calculate mean\r\n        const meanSum = classStats.mean.reduce((sum, value) => sum + value, 0);\r\n        classStats.mean = (meanSum / classStats.mean.length).toFixed(2);\r\n\r\n        // Calculate median\r\n        classStats.median.sort((a, b) => a - b);\r\n        const medianIndex = Math.floor(classStats.median.length / 2);\r\n        if (classStats.median.length % 2 === 0) {\r\n          classStats.median = ((classStats.median[medianIndex - 1] + classStats.median[medianIndex]) / 2).toFixed(2);\r\n        } else {\r\n          classStats.median = classStats.median[medianIndex].toFixed(2);\r\n        }\r\n\r\n        // Calculate mode\r\n        let mode = null;\r\n        let maxCount = 0;\r\n        for (const flavanoids in classStats.mode) {\r\n          if (classStats.mode[flavanoids] > maxCount) {\r\n            mode = flavanoids;\r\n            maxCount = classStats.mode[flavanoids];\r\n          }\r\n        }\r\n        classStats.mode = mode ? mode.toFixed(2) : 'N/A';\r\n      }\r\n\r\n      setClassStats(stats);\r\n    };\r\n\r\n    calculateStats();\r\n  }, [dataset]);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {Object.keys(classStats).map(alcoholClass => (\r\n            <th key={alcoholClass}>{alcoholClass}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean\r\n          </td>\r\n          {Object.keys(classStats).map(alcoholClass => (\r\n            <td key={alcoholClass}>{classStats[alcoholClass].mean}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {Object.keys(classStats).map(alcoholClass => (\r\n            <td key={alcoholClass}>{classStats[alcoholClass].median}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {Object.keys(classStats).map(alcoholClass => (\r\n            <td key={alcoholClass}>{classStats[alcoholClass].mode}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\nexport default FlavanoidsStatsTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}