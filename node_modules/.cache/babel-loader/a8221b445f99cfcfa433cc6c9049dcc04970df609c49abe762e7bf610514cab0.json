{"ast":null,"code":"// Utility function to calculate the mean\nfunction calculateMean(data) {\n  const sum = data.reduce((acc, value) => acc + value, 0);\n  return sum / data.length;\n}\n\n// Utility function to calculate the median\nfunction calculateMedian(data) {\n  const sortedData = data.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedData.length / 2);\n  if (sortedData.length % 2 === 0) {\n    return (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\n  } else {\n    return sortedData[middleIndex];\n  }\n}\n\n// Utility function to calculate the mode\nfunction calculateMode(data) {\n  const frequencyMap = {};\n  let maxFrequency = 0;\n  let modes = [];\n  data.forEach(value => {\n    frequencyMap[value] = (frequencyMap[value] || 0) + 1;\n    if (frequencyMap[value] > maxFrequency) {\n      maxFrequency = frequencyMap[value];\n      modes = [value];\n    } else if (frequencyMap[value] === maxFrequency) {\n      modes.push(value);\n    }\n  });\n  return modes;\n}\n\n// Function to calculate class-wise mean, median, and mode\nexport default function calculateClasswiseStats(data) {\n  const stats = {};\n  data.forEach(entry => {\n    const className = entry.Alcohol;\n    const flavanoids = entry.Flavanoids;\n    if (!stats[className]) {\n      stats[className] = {\n        Flavanoids: [flavanoids]\n      };\n    } else {\n      stats[className].Flavanoids.push(flavanoids);\n    }\n  });\n  for (const className in stats) {\n    const flavanoidsData = stats[className].Flavanoids;\n    stats[className].Mean = calculateMean(flavanoidsData);\n    stats[className].Median = calculateMedian(flavanoidsData);\n    stats[className].Mode = calculateMode(flavanoidsData);\n  }\n  return stats;\n}","map":{"version":3,"names":["calculateMean","data","sum","reduce","acc","value","length","calculateMedian","sortedData","sort","a","b","middleIndex","Math","floor","calculateMode","frequencyMap","maxFrequency","modes","forEach","push","calculateClasswiseStats","stats","entry","className","Alcohol","flavanoids","Flavanoids","flavanoidsData","Mean","Median","Mode"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["// Utility function to calculate the mean\r\nfunction calculateMean(data) {\r\n  const sum = data.reduce((acc, value) => acc + value, 0);\r\n  return sum / data.length;\r\n}\r\n\r\n// Utility function to calculate the median\r\nfunction calculateMedian(data) {\r\n  const sortedData = data.sort((a, b) => a - b);\r\n  const middleIndex = Math.floor(sortedData.length / 2);\r\n  \r\n  if (sortedData.length % 2 === 0) {\r\n    return (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\r\n  } else {\r\n    return sortedData[middleIndex];\r\n  }\r\n}\r\n\r\n// Utility function to calculate the mode\r\nfunction calculateMode(data) {\r\n  const frequencyMap = {};\r\n  let maxFrequency = 0;\r\n  let modes = [];\r\n  \r\n  data.forEach((value) => {\r\n    frequencyMap[value] = (frequencyMap[value] || 0) + 1;\r\n    \r\n    if (frequencyMap[value] > maxFrequency) {\r\n      maxFrequency = frequencyMap[value];\r\n      modes = [value];\r\n    } else if (frequencyMap[value] === maxFrequency) {\r\n      modes.push(value);\r\n    }\r\n  });\r\n  \r\n  return modes;\r\n}\r\n\r\n// Function to calculate class-wise mean, median, and mode\r\nexport default function calculateClasswiseStats(data) {\r\n  const stats = {};\r\n  \r\n  data.forEach((entry) => {\r\n    const className = entry.Alcohol;\r\n    const flavanoids = entry.Flavanoids;\r\n    \r\n    if (!stats[className]) {\r\n      stats[className] = {\r\n        Flavanoids: [flavanoids],\r\n      };\r\n    } else {\r\n      stats[className].Flavanoids.push(flavanoids);\r\n    }\r\n  });\r\n  \r\n  for (const className in stats) {\r\n    const flavanoidsData = stats[className].Flavanoids;\r\n    stats[className].Mean = calculateMean(flavanoidsData);\r\n    stats[className].Median = calculateMedian(flavanoidsData);\r\n    stats[className].Mode = calculateMode(flavanoidsData);\r\n  }\r\n  \r\n  return stats;\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,aAAaA,CAACC,IAAI,EAAE;EAC3B,MAAMC,GAAG,GAAGD,IAAI,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAGC,KAAK,EAAE,CAAC,CAAC;EACvD,OAAOH,GAAG,GAAGD,IAAI,CAACK,MAAM;AAC1B;;AAEA;AACA,SAASC,eAAeA,CAACN,IAAI,EAAE;EAC7B,MAAMO,UAAU,GAAGP,IAAI,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC7C,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;EAErD,IAAIE,UAAU,CAACF,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC/B,OAAO,CAACE,UAAU,CAACI,WAAW,GAAG,CAAC,CAAC,GAAGJ,UAAU,CAACI,WAAW,CAAC,IAAI,CAAC;EACpE,CAAC,MAAM;IACL,OAAOJ,UAAU,CAACI,WAAW,CAAC;EAChC;AACF;;AAEA;AACA,SAASG,aAAaA,CAACd,IAAI,EAAE;EAC3B,MAAMe,YAAY,GAAG,CAAC,CAAC;EACvB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,KAAK,GAAG,EAAE;EAEdjB,IAAI,CAACkB,OAAO,CAAEd,KAAK,IAAK;IACtBW,YAAY,CAACX,KAAK,CAAC,GAAG,CAACW,YAAY,CAACX,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAEpD,IAAIW,YAAY,CAACX,KAAK,CAAC,GAAGY,YAAY,EAAE;MACtCA,YAAY,GAAGD,YAAY,CAACX,KAAK,CAAC;MAClCa,KAAK,GAAG,CAACb,KAAK,CAAC;IACjB,CAAC,MAAM,IAAIW,YAAY,CAACX,KAAK,CAAC,KAAKY,YAAY,EAAE;MAC/CC,KAAK,CAACE,IAAI,CAACf,KAAK,CAAC;IACnB;EACF,CAAC,CAAC;EAEF,OAAOa,KAAK;AACd;;AAEA;AACA,eAAe,SAASG,uBAAuBA,CAACpB,IAAI,EAAE;EACpD,MAAMqB,KAAK,GAAG,CAAC,CAAC;EAEhBrB,IAAI,CAACkB,OAAO,CAAEI,KAAK,IAAK;IACtB,MAAMC,SAAS,GAAGD,KAAK,CAACE,OAAO;IAC/B,MAAMC,UAAU,GAAGH,KAAK,CAACI,UAAU;IAEnC,IAAI,CAACL,KAAK,CAACE,SAAS,CAAC,EAAE;MACrBF,KAAK,CAACE,SAAS,CAAC,GAAG;QACjBG,UAAU,EAAE,CAACD,UAAU;MACzB,CAAC;IACH,CAAC,MAAM;MACLJ,KAAK,CAACE,SAAS,CAAC,CAACG,UAAU,CAACP,IAAI,CAACM,UAAU,CAAC;IAC9C;EACF,CAAC,CAAC;EAEF,KAAK,MAAMF,SAAS,IAAIF,KAAK,EAAE;IAC7B,MAAMM,cAAc,GAAGN,KAAK,CAACE,SAAS,CAAC,CAACG,UAAU;IAClDL,KAAK,CAACE,SAAS,CAAC,CAACK,IAAI,GAAG7B,aAAa,CAAC4B,cAAc,CAAC;IACrDN,KAAK,CAACE,SAAS,CAAC,CAACM,MAAM,GAAGvB,eAAe,CAACqB,cAAc,CAAC;IACzDN,KAAK,CAACE,SAAS,CAAC,CAACO,IAAI,GAAGhB,aAAa,CAACa,cAAc,CAAC;EACvD;EAEA,OAAON,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}