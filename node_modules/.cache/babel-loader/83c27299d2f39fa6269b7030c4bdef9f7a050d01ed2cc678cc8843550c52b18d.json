{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatasetAnalyzer = () => {\n  _s();\n  const [dataset, setDataset] = useState([]);\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    // Function to import the JSON file and set the dataset\n    const importDataset = async () => {\n      const response = await fetch('your_dataset.json');\n      const data = await response.json();\n      setDataset(data);\n    };\n    importDataset();\n  }, []);\n  useEffect(() => {\n    // Function to calculate class-wise mean, median, and mode of Flavanoids\n    const calculateStatistics = () => {\n      const classes = {}; // Store the statistics for each class\n      dataset.forEach(entry => {\n        const {\n          Alcohol,\n          Flavanoids\n        } = entry;\n        if (!classes[Alcohol]) {\n          classes[Alcohol] = [Flavanoids];\n        } else {\n          classes[Alcohol].push(Flavanoids);\n        }\n      });\n      const computedResults = [];\n      for (const alcoholClass in classes) {\n        const classData = classes[alcoholClass];\n        const mean = calculateMean(classData);\n        const median = calculateMedian(classData);\n        const mode = calculateMode(classData);\n        computedResults.push({\n          alcoholClass,\n          mean,\n          median,\n          mode\n        });\n      }\n      setResults(computedResults);\n    };\n    const calculateMean = data => {\n      const sum = data.reduce((acc, val) => acc + val, 0);\n      return sum / data.length;\n    };\n    const calculateMedian = data => {\n      const sortedData = data.sort((a, b) => a - b);\n      const middleIndex = Math.floor(sortedData.length / 2);\n      if (sortedData.length % 2 === 0) {\n        return (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\n      } else {\n        return sortedData[middleIndex];\n      }\n    };\n    const calculateMode = data => {\n      const countMap = {};\n      data.forEach(val => {\n        countMap[val] = countMap[val] ? countMap[val] + 1 : 1;\n      });\n      let mode = null;\n      let maxCount = 0;\n      for (const val in countMap) {\n        if (countMap[val] > maxCount) {\n          mode = val;\n          maxCount = countMap[val];\n        }\n      }\n      return mode;\n    };\n    if (dataset.length > 0) {\n      calculateStatistics();\n    }\n  }, [dataset]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dataset Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), results.map(result => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", result.alcoholClass]\n          }, result.alcoholClass, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), results.map(result => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.mean\n          }, result.alcoholClass, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), results.map(result => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.median\n          }, result.alcoholClass, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), results.map(result => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.mode\n          }, result.alcoholClass, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 1\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(DatasetAnalyzer, \"VQXE0q8r5L4XRhSQ9Js71FXKQkk=\");\n_c = DatasetAnalyzer;\nexport default DatasetAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"DatasetAnalyzer\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DatasetAnalyzer","_s","dataset","setDataset","results","setResults","importDataset","response","fetch","data","json","calculateStatistics","classes","forEach","entry","Alcohol","Flavanoids","push","computedResults","alcoholClass","classData","mean","calculateMean","median","calculateMedian","mode","calculateMode","sum","reduce","acc","val","length","sortedData","sort","a","b","middleIndex","Math","floor","countMap","maxCount","children","fileName","_jsxFileName","lineNumber","columnNumber","map","result","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst DatasetAnalyzer = () => {\r\n  const [dataset, setDataset] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to import the JSON file and set the dataset\r\n    const importDataset = async () => {\r\n      const response = await fetch('your_dataset.json');\r\n      const data = await response.json();\r\n      setDataset(data);\r\n    };\r\n\r\n    importDataset();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Function to calculate class-wise mean, median, and mode of Flavanoids\r\n    const calculateStatistics = () => {\r\n      const classes = {}; // Store the statistics for each class\r\n      dataset.forEach(entry => {\r\n        const { Alcohol, Flavanoids } = entry;\r\n        if (!classes[Alcohol]) {\r\n          classes[Alcohol] = [Flavanoids];\r\n        } else {\r\n          classes[Alcohol].push(Flavanoids);\r\n        }\r\n      });\r\n\r\n      const computedResults = [];\r\n      for (const alcoholClass in classes) {\r\n        const classData = classes[alcoholClass];\r\n        const mean = calculateMean(classData);\r\n        const median = calculateMedian(classData);\r\n        const mode = calculateMode(classData);\r\n        computedResults.push({\r\n          alcoholClass,\r\n          mean,\r\n          median,\r\n          mode\r\n        });\r\n      }\r\n\r\n      setResults(computedResults);\r\n    };\r\n\r\n    const calculateMean = data => {\r\n      const sum = data.reduce((acc, val) => acc + val, 0);\r\n      return sum / data.length;\r\n    };\r\n\r\n    const calculateMedian = data => {\r\n      const sortedData = data.sort((a, b) => a - b);\r\n      const middleIndex = Math.floor(sortedData.length / 2);\r\n      if (sortedData.length % 2 === 0) {\r\n        return (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2;\r\n      } else {\r\n        return sortedData[middleIndex];\r\n      }\r\n    };\r\n\r\n    const calculateMode = data => {\r\n      const countMap = {};\r\n      data.forEach(val => {\r\n        countMap[val] = countMap[val] ? countMap[val] + 1 : 1;\r\n      });\r\n      let mode = null;\r\n      let maxCount = 0;\r\n      for (const val in countMap) {\r\n        if (countMap[val] > maxCount) {\r\n          mode = val;\r\n          maxCount = countMap[val];\r\n        }\r\n      }\r\n      return mode;\r\n    };\r\n\r\n    if (dataset.length > 0) {\r\n      calculateStatistics();\r\n    }\r\n  }, [dataset]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dataset Analyzer</h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {results.map(result => (\r\n              <th key={result.alcoholClass}>Class {result.alcoholClass}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {results.map(result => (\r\n              <td key={result.alcoholClass}>{result.mean}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {results.map(result => (\r\n              <td key={result.alcoholClass}>{result.median}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n{results.map(result => (\r\n<td key={result.alcoholClass}>{result.mode}</td>\r\n))}\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n);\r\n};\r\n\r\nexport default DatasetAnalyzer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}