{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\GammaStatistics.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculateGamma(data) {\n  return data.map(d => ({\n    ...d,\n    Gamma: d.Ash * d.Hue / d.Magnesium\n  }));\n}\nfunction calculateClassWiseGamma(data) {\n  const classWiseGamma = {};\n  data.forEach(d => {\n    const classValue = d.Alcohol;\n    if (!classWiseGamma[classValue]) {\n      classWiseGamma[classValue] = [];\n    }\n    classWiseGamma[classValue].push(d.Gamma);\n  });\n  return classWiseGamma;\n}\nfunction calculateClassWiseGammaMean(data) {\n  const classWiseGamma = calculateClassWiseGamma(data);\n  const classWiseGammaMean = {};\n  Object.keys(classWiseGamma).forEach(classValue => {\n    const gammaValues = classWiseGamma[classValue];\n    const sum = gammaValues.reduce((acc, val) => acc + val, 0);\n    const mean = sum / gammaValues.length;\n    classWiseGammaMean[classValue] = mean;\n  });\n  return classWiseGammaMean;\n}\nfunction calculateClassWiseGammaMedian(data) {\n  const classWiseGamma = calculateClassWiseGamma(data);\n  const classWiseGammaMedian = {};\n  Object.keys(classWiseGamma).forEach(classValue => {\n    const gammaValues = classWiseGamma[classValue];\n    gammaValues.sort((a, b) => a - b);\n    const medianIndex = Math.floor(gammaValues.length / 2);\n    const median = gammaValues.length % 2 === 0 ? (gammaValues[medianIndex - 1] + gammaValues[medianIndex]) / 2 : gammaValues[medianIndex];\n    classWiseGammaMedian[classValue] = median;\n  });\n  return classWiseGammaMedian.toFixed(3);\n}\nfunction calculateClassWiseGammaMode(data) {\n  const classWiseGamma = calculateClassWiseGamma(data);\n  const classWiseGammaMode = {};\n  Object.keys(classWiseGamma).forEach(classValue => {\n    const gammaValues = classWiseGamma[classValue];\n    const frequencyMap = {};\n    gammaValues.forEach(gamma => {\n      if (!frequencyMap[gamma]) {\n        frequencyMap[gamma] = 0;\n      }\n      frequencyMap[gamma]++;\n    });\n    let mode;\n    let maxFrequency = 0;\n    Object.keys(frequencyMap).forEach(gamma => {\n      if (frequencyMap[gamma] > maxFrequency) {\n        mode = gamma;\n        maxFrequency = frequencyMap[gamma];\n      }\n    });\n    classWiseGammaMode[classValue] = mode;\n  });\n  return classWiseGammaMode;\n}\nfunction AlcoholTable(props) {\n  const {\n    data\n  } = props;\n  const gammaData = calculateGamma(data);\n  const classWiseGammaMean = calculateClassWiseGammaMean(gammaData);\n  const classWiseGammaMedian = calculateClassWiseGammaMedian(gammaData);\n  const classWiseGammaMode = calculateClassWiseGammaMode(gammaData);\n  const classes = Array.from(new Set(data.map(d => d.Alcohol)));\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), classes.map(classValue => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", classValue]\n        }, classValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Gamma Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), classes.map(classValue => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classWiseGammaMean[classValue]\n        }, classValue, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Gamma Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this), classes.map(classValue => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classWiseGammaMedian[classValue]\n        }, classValue, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Gamma Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }, this), classes.map(classValue => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: classWiseGammaMode[classValue]\n        }, classValue, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_c = AlcoholTable;\nexport default AlcoholTable;\nvar _c;\n$RefreshReg$(_c, \"AlcoholTable\");","map":{"version":3,"names":["calculateGamma","data","map","d","Gamma","Ash","Hue","Magnesium","calculateClassWiseGamma","classWiseGamma","forEach","classValue","Alcohol","push","calculateClassWiseGammaMean","classWiseGammaMean","Object","keys","gammaValues","sum","reduce","acc","val","mean","length","calculateClassWiseGammaMedian","classWiseGammaMedian","sort","a","b","medianIndex","Math","floor","median","toFixed","calculateClassWiseGammaMode","classWiseGammaMode","frequencyMap","gamma","mode","maxFrequency","AlcoholTable","props","gammaData","classes","Array","from","Set","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/GammaStatistics.jsx"],"sourcesContent":["function calculateGamma(data) {\r\n  return data.map((d) => ({\r\n    ...d,\r\n    Gamma: (d.Ash * d.Hue) / d.Magnesium,\r\n  }));\r\n}\r\n\r\nfunction calculateClassWiseGamma(data) {\r\n  const classWiseGamma = {};\r\n  data.forEach((d) => {\r\n    const classValue = d.Alcohol;\r\n    if (!classWiseGamma[classValue]) {\r\n      classWiseGamma[classValue] = [];\r\n    }\r\n    classWiseGamma[classValue].push(d.Gamma);\r\n  });\r\n  return classWiseGamma;\r\n}\r\n\r\nfunction calculateClassWiseGammaMean(data) {\r\n  const classWiseGamma = calculateClassWiseGamma(data);\r\n  const classWiseGammaMean = {};\r\n  Object.keys(classWiseGamma).forEach((classValue) => {\r\n    const gammaValues = classWiseGamma[classValue];\r\n    const sum = gammaValues.reduce((acc, val) => acc + val, 0);\r\n    const mean = sum / gammaValues.length;\r\n    classWiseGammaMean[classValue] = mean;\r\n  });\r\n  return classWiseGammaMean;\r\n}\r\n\r\nfunction calculateClassWiseGammaMedian(data) {\r\n  const classWiseGamma = calculateClassWiseGamma(data);\r\n  const classWiseGammaMedian = {};\r\n  Object.keys(classWiseGamma).forEach((classValue) => {\r\n    const gammaValues = classWiseGamma[classValue];\r\n    gammaValues.sort((a, b) => a - b);\r\n    const medianIndex = Math.floor(gammaValues.length / 2);\r\n    const median =\r\n      gammaValues.length % 2 === 0\r\n        ? (gammaValues[medianIndex - 1] + gammaValues[medianIndex]) / 2\r\n        : gammaValues[medianIndex];\r\n    classWiseGammaMedian[classValue] = median;\r\n  });\r\n  return classWiseGammaMedian.toFixed(3);\r\n}\r\n\r\nfunction calculateClassWiseGammaMode(data) {\r\n  const classWiseGamma = calculateClassWiseGamma(data);\r\n  const classWiseGammaMode = {};\r\n  Object.keys(classWiseGamma).forEach((classValue) => {\r\n    const gammaValues = classWiseGamma[classValue];\r\n    const frequencyMap = {};\r\n    gammaValues.forEach((gamma) => {\r\n      if (!frequencyMap[gamma]) {\r\n        frequencyMap[gamma] = 0;\r\n      }\r\n      frequencyMap[gamma]++;\r\n    });\r\n    let mode;\r\n    let maxFrequency = 0;\r\n    Object.keys(frequencyMap).forEach((gamma) => {\r\n      if (frequencyMap[gamma] > maxFrequency) {\r\n        mode = gamma;\r\n        maxFrequency = frequencyMap[gamma];\r\n      }\r\n    });\r\n    classWiseGammaMode[classValue] = mode;\r\n  });\r\n  return classWiseGammaMode;\r\n}\r\n\r\nfunction AlcoholTable(props) {\r\n  const { data } = props;\r\n\r\n  const gammaData = calculateGamma(data);\r\n  const classWiseGammaMean = calculateClassWiseGammaMean(gammaData);\r\n  const classWiseGammaMedian = calculateClassWiseGammaMedian(gammaData);\r\n  const classWiseGammaMode = calculateClassWiseGammaMode(gammaData);\r\n\r\n  const classes = Array.from(new Set(data.map((d) => d.Alcohol)));\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr><th>Measure</th>\r\n      {classes.map((classValue) => (\r\n        <th key={classValue}>Class {classValue}</th>\r\n      ))}\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td>Gamma Mean</td>\r\n      {classes.map((classValue) => (\r\n        <td key={classValue}>{classWiseGammaMean[classValue]}</td>\r\n      ))}\r\n    </tr>\r\n    <tr>\r\n      <td>Gamma Median</td>\r\n      {classes.map((classValue) => (\r\n        <td key={classValue}>{classWiseGammaMedian[classValue]}</td>\r\n      ))}\r\n    </tr>\r\n    <tr>\r\n      <td>Gamma Mode</td>\r\n      {classes.map((classValue) => (\r\n        <td key={classValue}>{classWiseGammaMode[classValue]}</td>\r\n      ))}\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n);\r\n}\r\n\r\nexport default AlcoholTable;"],"mappings":";;AAAA,SAASA,cAAcA,CAACC,IAAI,EAAE;EAC5B,OAAOA,IAAI,CAACC,GAAG,CAAEC,CAAC,KAAM;IACtB,GAAGA,CAAC;IACJC,KAAK,EAAGD,CAAC,CAACE,GAAG,GAAGF,CAAC,CAACG,GAAG,GAAIH,CAAC,CAACI;EAC7B,CAAC,CAAC,CAAC;AACL;AAEA,SAASC,uBAAuBA,CAACP,IAAI,EAAE;EACrC,MAAMQ,cAAc,GAAG,CAAC,CAAC;EACzBR,IAAI,CAACS,OAAO,CAAEP,CAAC,IAAK;IAClB,MAAMQ,UAAU,GAAGR,CAAC,CAACS,OAAO;IAC5B,IAAI,CAACH,cAAc,CAACE,UAAU,CAAC,EAAE;MAC/BF,cAAc,CAACE,UAAU,CAAC,GAAG,EAAE;IACjC;IACAF,cAAc,CAACE,UAAU,CAAC,CAACE,IAAI,CAACV,CAAC,CAACC,KAAK,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOK,cAAc;AACvB;AAEA,SAASK,2BAA2BA,CAACb,IAAI,EAAE;EACzC,MAAMQ,cAAc,GAAGD,uBAAuB,CAACP,IAAI,CAAC;EACpD,MAAMc,kBAAkB,GAAG,CAAC,CAAC;EAC7BC,MAAM,CAACC,IAAI,CAACR,cAAc,CAAC,CAACC,OAAO,CAAEC,UAAU,IAAK;IAClD,MAAMO,WAAW,GAAGT,cAAc,CAACE,UAAU,CAAC;IAC9C,MAAMQ,GAAG,GAAGD,WAAW,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;IAC1D,MAAMC,IAAI,GAAGJ,GAAG,GAAGD,WAAW,CAACM,MAAM;IACrCT,kBAAkB,CAACJ,UAAU,CAAC,GAAGY,IAAI;EACvC,CAAC,CAAC;EACF,OAAOR,kBAAkB;AAC3B;AAEA,SAASU,6BAA6BA,CAACxB,IAAI,EAAE;EAC3C,MAAMQ,cAAc,GAAGD,uBAAuB,CAACP,IAAI,CAAC;EACpD,MAAMyB,oBAAoB,GAAG,CAAC,CAAC;EAC/BV,MAAM,CAACC,IAAI,CAACR,cAAc,CAAC,CAACC,OAAO,CAAEC,UAAU,IAAK;IAClD,MAAMO,WAAW,GAAGT,cAAc,CAACE,UAAU,CAAC;IAC9CO,WAAW,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IACjC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACd,WAAW,CAACM,MAAM,GAAG,CAAC,CAAC;IACtD,MAAMS,MAAM,GACVf,WAAW,CAACM,MAAM,GAAG,CAAC,KAAK,CAAC,GACxB,CAACN,WAAW,CAACY,WAAW,GAAG,CAAC,CAAC,GAAGZ,WAAW,CAACY,WAAW,CAAC,IAAI,CAAC,GAC7DZ,WAAW,CAACY,WAAW,CAAC;IAC9BJ,oBAAoB,CAACf,UAAU,CAAC,GAAGsB,MAAM;EAC3C,CAAC,CAAC;EACF,OAAOP,oBAAoB,CAACQ,OAAO,CAAC,CAAC,CAAC;AACxC;AAEA,SAASC,2BAA2BA,CAAClC,IAAI,EAAE;EACzC,MAAMQ,cAAc,GAAGD,uBAAuB,CAACP,IAAI,CAAC;EACpD,MAAMmC,kBAAkB,GAAG,CAAC,CAAC;EAC7BpB,MAAM,CAACC,IAAI,CAACR,cAAc,CAAC,CAACC,OAAO,CAAEC,UAAU,IAAK;IAClD,MAAMO,WAAW,GAAGT,cAAc,CAACE,UAAU,CAAC;IAC9C,MAAM0B,YAAY,GAAG,CAAC,CAAC;IACvBnB,WAAW,CAACR,OAAO,CAAE4B,KAAK,IAAK;MAC7B,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;QACxBD,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC;MACzB;MACAD,YAAY,CAACC,KAAK,CAAC,EAAE;IACvB,CAAC,CAAC;IACF,IAAIC,IAAI;IACR,IAAIC,YAAY,GAAG,CAAC;IACpBxB,MAAM,CAACC,IAAI,CAACoB,YAAY,CAAC,CAAC3B,OAAO,CAAE4B,KAAK,IAAK;MAC3C,IAAID,YAAY,CAACC,KAAK,CAAC,GAAGE,YAAY,EAAE;QACtCD,IAAI,GAAGD,KAAK;QACZE,YAAY,GAAGH,YAAY,CAACC,KAAK,CAAC;MACpC;IACF,CAAC,CAAC;IACFF,kBAAkB,CAACzB,UAAU,CAAC,GAAG4B,IAAI;EACvC,CAAC,CAAC;EACF,OAAOH,kBAAkB;AAC3B;AAEA,SAASK,YAAYA,CAACC,KAAK,EAAE;EAC3B,MAAM;IAAEzC;EAAK,CAAC,GAAGyC,KAAK;EAEtB,MAAMC,SAAS,GAAG3C,cAAc,CAACC,IAAI,CAAC;EACtC,MAAMc,kBAAkB,GAAGD,2BAA2B,CAAC6B,SAAS,CAAC;EACjE,MAAMjB,oBAAoB,GAAGD,6BAA6B,CAACkB,SAAS,CAAC;EACrE,MAAMP,kBAAkB,GAAGD,2BAA2B,CAACQ,SAAS,CAAC;EAEjE,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC9C,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACS,OAAO,CAAC,CAAC,CAAC;EAE/D,oBACEoC,OAAA;IAAAC,QAAA,gBACED,OAAA;MAAAC,QAAA,eACED,OAAA;QAAAC,QAAA,gBAAID,OAAA;UAAAC,QAAA,EAAI;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACrBT,OAAO,CAAC1C,GAAG,CAAES,UAAU,iBACtBqC,OAAA;UAAAC,QAAA,GAAqB,QAAM,EAACtC,UAAU;QAAA,GAA7BA,UAAU;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAwB,CAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACRL,OAAA;MAAAC,QAAA,gBACED,OAAA;QAAAC,QAAA,gBACED,OAAA;UAAAC,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAClBT,OAAO,CAAC1C,GAAG,CAAES,UAAU,iBACtBqC,OAAA;UAAAC,QAAA,EAAsBlC,kBAAkB,CAACJ,UAAU;QAAC,GAA3CA,UAAU;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAsC,CAC1D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLL,OAAA;QAAAC,QAAA,gBACED,OAAA;UAAAC,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACpBT,OAAO,CAAC1C,GAAG,CAAES,UAAU,iBACtBqC,OAAA;UAAAC,QAAA,EAAsBvB,oBAAoB,CAACf,UAAU;QAAC,GAA7CA,UAAU;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAwC,CAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLL,OAAA;QAAAC,QAAA,gBACED,OAAA;UAAAC,QAAA,EAAI;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAClBT,OAAO,CAAC1C,GAAG,CAAES,UAAU,iBACtBqC,OAAA;UAAAC,QAAA,EAAsBb,kBAAkB,CAACzB,UAAU;QAAC,GAA3CA,UAAU;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAsC,CAC1D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAER;AAACC,EAAA,GAzCQb,YAAY;AA2CrB,eAAeA,YAAY;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}