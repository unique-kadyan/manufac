{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FlavanoidsStats extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      dataset: [{\n        Alcohol: 1,\n        Flavanoids: 2.3\n      }, {\n        Alcohol: 2,\n        Flavanoids: 1.8\n      }, {\n        Alcohol: 1,\n        Flavanoids: 3.2\n      }, {\n        Alcohol: 3,\n        Flavanoids: 2.6\n      }\n      // ... more data objects\n      ]\n    };\n    // Utility function to calculate the mean of an array\n    this.calculateMean = arr => {\n      const sum = arr.reduce((acc, val) => acc + val, 0);\n      return sum / arr.length;\n    };\n    // Utility function to calculate the median of an array\n    this.calculateMedian = arr => {\n      const sortedArr = arr.slice().sort((a, b) => a - b);\n      const middleIndex = Math.floor(sortedArr.length / 2);\n      if (sortedArr.length % 2 === 0) {\n        return (sortedArr[middleIndex - 1] + sortedArr[middleIndex]) / 2;\n      } else {\n        return sortedArr[middleIndex];\n      }\n    };\n    // Utility function to calculate the mode of an array\n    this.calculateMode = arr => {\n      const frequencyMap = {};\n      let maxFrequency = 0;\n      let modes = [];\n      arr.forEach(value => {\n        frequencyMap[value] = (frequencyMap[value] || 0) + 1;\n        if (frequencyMap[value] > maxFrequency) {\n          maxFrequency = frequencyMap[value];\n          modes = [value];\n        } else if (frequencyMap[value] === maxFrequency) {\n          modes.push(value);\n        }\n      });\n      return modes;\n    };\n    // Utility function to calculate the class-wise statistics of Flavanoids\n    this.calculateClassStats = () => {\n      const {\n        dataset\n      } = this.state;\n      const classStats = {};\n      dataset.forEach(dataObj => {\n        const {\n          Alcohol,\n          Flavanoids\n        } = dataObj;\n        if (!classStats[Alcohol]) {\n          classStats[Alcohol] = {\n            Flavanoids: [Flavanoids]\n          };\n        } else {\n          classStats[Alcohol].Flavanoids.push(Flavanoids);\n        }\n      });\n      Object.keys(classStats).forEach(alcoholClass => {\n        const flavanoidsArray = classStats[alcoholClass].Flavanoids;\n        classStats[alcoholClass].Flavanoids = {\n          Mean: this.calculateMean(flavanoidsArray),\n          Median: this.calculateMedian(flavanoidsArray),\n          Mode: this.calculateMode(flavanoidsArray)\n        };\n      });\n      return classStats;\n    };\n  }\n  render() {\n    const classStats = this.calculateClassStats();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Measure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [\"Class \", alcoholClass]\n            }, alcoholClass, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Flavanoids Mean\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].Flavanoids.Mean.toFixed(2)\n            }, alcoholClass, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Flavanoids Median\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 1\n            }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].Flavanoids.Median.toFixed(2)\n            }, alcoholClass, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 1\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Flavanoids Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 1\n            }, this), Object.keys(classStats).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: classStats[alcoholClass].Flavanoids.Mode.join(', ')\n            }, alcoholClass, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 1\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FlavanoidsStats;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FlavanoidsStats","Component","constructor","arguments","state","dataset","Alcohol","Flavanoids","calculateMean","arr","sum","reduce","acc","val","length","calculateMedian","sortedArr","slice","sort","a","b","middleIndex","Math","floor","calculateMode","frequencyMap","maxFrequency","modes","forEach","value","push","calculateClassStats","classStats","dataObj","Object","keys","alcoholClass","flavanoidsArray","Mean","Median","Mode","render","children","fileName","_jsxFileName","lineNumber","columnNumber","map","toFixed","join"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nclass FlavanoidsStats extends React.Component {\r\n  state = {\r\n    dataset: [\r\n      { Alcohol: 1, Flavanoids: 2.3 },\r\n      { Alcohol: 2, Flavanoids: 1.8 },\r\n      { Alcohol: 1, Flavanoids: 3.2 },\r\n      { Alcohol: 3, Flavanoids: 2.6 },\r\n      // ... more data objects\r\n    ],\r\n  };\r\n\r\n  // Utility function to calculate the mean of an array\r\n  calculateMean = (arr) => {\r\n    const sum = arr.reduce((acc, val) => acc + val, 0);\r\n    return sum / arr.length;\r\n  };\r\n\r\n  // Utility function to calculate the median of an array\r\n  calculateMedian = (arr) => {\r\n    const sortedArr = arr.slice().sort((a, b) => a - b);\r\n    const middleIndex = Math.floor(sortedArr.length / 2);\r\n\r\n    if (sortedArr.length % 2 === 0) {\r\n      return (sortedArr[middleIndex - 1] + sortedArr[middleIndex]) / 2;\r\n    } else {\r\n      return sortedArr[middleIndex];\r\n    }\r\n  };\r\n\r\n  // Utility function to calculate the mode of an array\r\n  calculateMode = (arr) => {\r\n    const frequencyMap = {};\r\n    let maxFrequency = 0;\r\n    let modes = [];\r\n\r\n    arr.forEach((value) => {\r\n      frequencyMap[value] = (frequencyMap[value] || 0) + 1;\r\n      if (frequencyMap[value] > maxFrequency) {\r\n        maxFrequency = frequencyMap[value];\r\n        modes = [value];\r\n      } else if (frequencyMap[value] === maxFrequency) {\r\n        modes.push(value);\r\n      }\r\n    });\r\n\r\n    return modes;\r\n  };\r\n\r\n  // Utility function to calculate the class-wise statistics of Flavanoids\r\n  calculateClassStats = () => {\r\n    const { dataset } = this.state;\r\n    const classStats = {};\r\n\r\n    dataset.forEach((dataObj) => {\r\n      const { Alcohol, Flavanoids } = dataObj;\r\n\r\n      if (!classStats[Alcohol]) {\r\n        classStats[Alcohol] = {\r\n          Flavanoids: [Flavanoids],\r\n        };\r\n      } else {\r\n        classStats[Alcohol].Flavanoids.push(Flavanoids);\r\n      }\r\n    });\r\n\r\n    Object.keys(classStats).forEach((alcoholClass) => {\r\n      const flavanoidsArray = classStats[alcoholClass].Flavanoids;\r\n\r\n      classStats[alcoholClass].Flavanoids = {\r\n        Mean: this.calculateMean(flavanoidsArray),\r\n        Median: this.calculateMedian(flavanoidsArray),\r\n        Mode: this.calculateMode(flavanoidsArray),\r\n      };\r\n    });\r\n\r\n    return classStats;\r\n  };\r\n\r\n  render() {\r\n    const classStats = this.calculateClassStats();\r\n\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Measure</th>\r\n              {Object.keys(classStats).map((alcoholClass) => (\r\n                <th key={alcoholClass}>Class {alcoholClass}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Flavanoids Mean</td>\r\n              {Object.keys(classStats).map((alcoholClass) => (\r\n                <td key={alcoholClass}>\r\n                  {classStats[alcoholClass].Flavanoids.Mean.toFixed(2)}\r\n</td>\r\n))}\r\n</tr>\r\n<tr>\r\n<td>Flavanoids Median</td>\r\n{Object.keys(classStats).map((alcoholClass) => (\r\n<td key={alcoholClass}>\r\n{classStats[alcoholClass].Flavanoids.Median.toFixed(2)}\r\n</td>\r\n))}\r\n</tr>\r\n<tr>\r\n<td>Flavanoids Mode</td>\r\n{Object.keys(classStats).map((alcoholClass) => (\r\n<td key={alcoholClass}>\r\n{classStats[alcoholClass].Flavanoids.Mode.join(', ')}\r\n</td>\r\n))}\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n);\r\n}\r\n}\r\n\r\nexport default FlavanoidsStats;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,eAAe,SAASH,KAAK,CAACI,SAAS,CAAC;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAA,KAC5CC,KAAK,GAAG;MACNC,OAAO,EAAE,CACP;QAAEC,OAAO,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAI,CAAC,EAC/B;QAAED,OAAO,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAI,CAAC,EAC/B;QAAED,OAAO,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAI,CAAC,EAC/B;QAAED,OAAO,EAAE,CAAC;QAAEC,UAAU,EAAE;MAAI;MAC9B;MAAA;IAEJ,CAAC;IAED;IAAA,KACAC,aAAa,GAAIC,GAAG,IAAK;MACvB,MAAMC,GAAG,GAAGD,GAAG,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;MAClD,OAAOH,GAAG,GAAGD,GAAG,CAACK,MAAM;IACzB,CAAC;IAED;IAAA,KACAC,eAAe,GAAIN,GAAG,IAAK;MACzB,MAAMO,SAAS,GAAGP,GAAG,CAACQ,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;MACnD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,SAAS,CAACF,MAAM,GAAG,CAAC,CAAC;MAEpD,IAAIE,SAAS,CAACF,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QAC9B,OAAO,CAACE,SAAS,CAACK,WAAW,GAAG,CAAC,CAAC,GAAGL,SAAS,CAACK,WAAW,CAAC,IAAI,CAAC;MAClE,CAAC,MAAM;QACL,OAAOL,SAAS,CAACK,WAAW,CAAC;MAC/B;IACF,CAAC;IAED;IAAA,KACAG,aAAa,GAAIf,GAAG,IAAK;MACvB,MAAMgB,YAAY,GAAG,CAAC,CAAC;MACvB,IAAIC,YAAY,GAAG,CAAC;MACpB,IAAIC,KAAK,GAAG,EAAE;MAEdlB,GAAG,CAACmB,OAAO,CAAEC,KAAK,IAAK;QACrBJ,YAAY,CAACI,KAAK,CAAC,GAAG,CAACJ,YAAY,CAACI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QACpD,IAAIJ,YAAY,CAACI,KAAK,CAAC,GAAGH,YAAY,EAAE;UACtCA,YAAY,GAAGD,YAAY,CAACI,KAAK,CAAC;UAClCF,KAAK,GAAG,CAACE,KAAK,CAAC;QACjB,CAAC,MAAM,IAAIJ,YAAY,CAACI,KAAK,CAAC,KAAKH,YAAY,EAAE;UAC/CC,KAAK,CAACG,IAAI,CAACD,KAAK,CAAC;QACnB;MACF,CAAC,CAAC;MAEF,OAAOF,KAAK;IACd,CAAC;IAED;IAAA,KACAI,mBAAmB,GAAG,MAAM;MAC1B,MAAM;QAAE1B;MAAQ,CAAC,GAAG,IAAI,CAACD,KAAK;MAC9B,MAAM4B,UAAU,GAAG,CAAC,CAAC;MAErB3B,OAAO,CAACuB,OAAO,CAAEK,OAAO,IAAK;QAC3B,MAAM;UAAE3B,OAAO;UAAEC;QAAW,CAAC,GAAG0B,OAAO;QAEvC,IAAI,CAACD,UAAU,CAAC1B,OAAO,CAAC,EAAE;UACxB0B,UAAU,CAAC1B,OAAO,CAAC,GAAG;YACpBC,UAAU,EAAE,CAACA,UAAU;UACzB,CAAC;QACH,CAAC,MAAM;UACLyB,UAAU,CAAC1B,OAAO,CAAC,CAACC,UAAU,CAACuB,IAAI,CAACvB,UAAU,CAAC;QACjD;MACF,CAAC,CAAC;MAEF2B,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAACJ,OAAO,CAAEQ,YAAY,IAAK;QAChD,MAAMC,eAAe,GAAGL,UAAU,CAACI,YAAY,CAAC,CAAC7B,UAAU;QAE3DyB,UAAU,CAACI,YAAY,CAAC,CAAC7B,UAAU,GAAG;UACpC+B,IAAI,EAAE,IAAI,CAAC9B,aAAa,CAAC6B,eAAe,CAAC;UACzCE,MAAM,EAAE,IAAI,CAACxB,eAAe,CAACsB,eAAe,CAAC;UAC7CG,IAAI,EAAE,IAAI,CAAChB,aAAa,CAACa,eAAe;QAC1C,CAAC;MACH,CAAC,CAAC;MAEF,OAAOL,UAAU;IACnB,CAAC;EAAA;EAEDS,MAAMA,CAAA,EAAG;IACP,MAAMT,UAAU,GAAG,IAAI,CAACD,mBAAmB,CAAC,CAAC;IAE7C,oBACEhC,OAAA;MAAA2C,QAAA,eACE3C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,eACE3C,OAAA;YAAA2C,QAAA,gBACE3C,OAAA;cAAA2C,QAAA,EAAI;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACfZ,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAACe,GAAG,CAAEX,YAAY,iBACxCrC,OAAA;cAAA2C,QAAA,GAAuB,QAAM,EAACN,YAAY;YAAA,GAAjCA,YAAY;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAA0B,CAChD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACR/C,OAAA;UAAA2C,QAAA,gBACE3C,OAAA;YAAA2C,QAAA,gBACE3C,OAAA;cAAA2C,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACvBZ,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAACe,GAAG,CAAEX,YAAY,iBACxCrC,OAAA;cAAA2C,QAAA,EACGV,UAAU,CAACI,YAAY,CAAC,CAAC7B,UAAU,CAAC+B,IAAI,CAACU,OAAO,CAAC,CAAC;YAAC,GAD7CZ,YAAY;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjC,CACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACL/C,OAAA;YAAA2C,QAAA,gBACA3C,OAAA;cAAA2C,QAAA,EAAI;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACzBZ,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAACe,GAAG,CAAEX,YAAY,iBAC1CrC,OAAA;cAAA2C,QAAA,EACCV,UAAU,CAACI,YAAY,CAAC,CAAC7B,UAAU,CAACgC,MAAM,CAACS,OAAO,CAAC,CAAC;YAAC,GAD7CZ,YAAY;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACL/C,OAAA;YAAA2C,QAAA,gBACA3C,OAAA;cAAA2C,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACvBZ,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAACe,GAAG,CAAEX,YAAY,iBAC1CrC,OAAA;cAAA2C,QAAA,EACCV,UAAU,CAACI,YAAY,CAAC,CAAC7B,UAAU,CAACiC,IAAI,CAACS,IAAI,CAAC,IAAI;YAAC,GAD3Cb,YAAY;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEN;AACA;AAEA,eAAe9C,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}