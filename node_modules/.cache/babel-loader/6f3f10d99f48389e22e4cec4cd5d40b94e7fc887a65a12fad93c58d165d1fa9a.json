{"ast":null,"code":"// Function to calculate the mean of an array of numbers\nimport data from '../dataset.json';\nfunction calculateMean(numbers) {\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\n  return sum / numbers.length;\n}\n\n// Function to calculate the median of an array of numbers\nfunction calculateMedian(numbers) {\n  const sorted = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    // If the array length is even, average the middle two numbers\n    return (sorted[middleIndex - 1] + sorted[middleIndex]) / 2;\n  } else {\n    // If the array length is odd, return the middle number\n    return sorted[middleIndex];\n  }\n}\n\n// Function to calculate the mode of an array of numbers\nfunction calculateMode(numbers) {\n  const counts = {};\n\n  // Count the occurrences of each number\n  numbers.forEach(num => {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  });\n  let mode = null;\n  let maxCount = 0;\n\n  // Find the number(s) with the highest occurrence\n  for (const num in counts) {\n    if (counts[num] > maxCount) {\n      mode = num;\n      maxCount = counts[num];\n    }\n  }\n  return mode;\n}\n\n// Function to calculate class-wise mean, median, and mode of Flavanoids\nfunction calculateFlavanoidsStats(data) {\n  const classes = {};\n\n  // Calculate Flavanoids stats for each class\n  data.forEach(item => {\n    const className = item.Alcohol;\n    if (!classes[className]) {\n      classes[className] = [];\n    }\n    classes[className].push(item.Flavanoids);\n  });\n  const stats = {};\n\n  // Calculate mean, median, and mode for each class\n  for (const className in classes) {\n    const flavanoids = classes[className];\n    stats[className] = {\n      mean: calculateMean(flavanoids),\n      median: calculateMedian(flavanoids),\n      mode: calculateMode(flavanoids)\n    };\n  }\n  return stats;\n}\n\n// Example usage\nconst jsonData = [{\n  Alcohol: \"Class 1\",\n  Flavanoids: 1.5\n}, {\n  Alcohol: \"Class 2\",\n  Flavanoids: 2.0\n}, {\n  Alcohol: \"Class 1\",\n  Flavanoids: 1.8\n}, {\n  Alcohol: \"Class 2\",\n  Flavanoids: 2.2\n}\n// ... more data\n];\n\nconst flavanoidsStats = calculateFlavanoidsStats(data);\n\n// Display the results in a tabular format\nconsole.log(\"Measure\\t\\t\\tClass 1\\t\\tClass 2\\t\\tClass ...\");\nconsole.log(\"Flavanoids Mean\\t\\t\", flavanoidsStats[\"Class 1\"].mean, \"\\t\\t\", flavanoidsStats[\"Class 2\"].mean, \"\\t\\t\", \"...\");\nconsole.log(\"Flavanoids Median\\t\", flavanoidsStats[\"Class 1\"].median, \"\\t\\t\", flavanoidsStats[\"Class 2\"].median, \"\\t\\t\", \"...\");\nconsole.log(\"Flavanoids Mode\\t\\t\", flavanoidsStats[\"Class 1\"].mode, \"\\t\\t\", flavanoidsStats[\"Class 2\"].mode, \"\\t\\t\", \"...\");","map":{"version":3,"names":["data","calculateMean","numbers","sum","reduce","acc","val","length","calculateMedian","sorted","sort","a","b","middleIndex","Math","floor","calculateMode","counts","forEach","num","mode","maxCount","calculateFlavanoidsStats","classes","item","className","Alcohol","push","Flavanoids","stats","flavanoids","mean","median","jsonData","flavanoidsStats","console","log"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["// Function to calculate the mean of an array of numbers\r\nimport data from '../dataset.json';\r\nfunction calculateMean(numbers) {\r\n  const sum = numbers.reduce((acc, val) => acc + val, 0);\r\n  return sum / numbers.length;\r\n}\r\n\r\n// Function to calculate the median of an array of numbers\r\nfunction calculateMedian(numbers) {\r\n  const sorted = numbers.sort((a, b) => a - b);\r\n  const middleIndex = Math.floor(sorted.length / 2);\r\n\r\n  if (sorted.length % 2 === 0) {\r\n    // If the array length is even, average the middle two numbers\r\n    return (sorted[middleIndex - 1] + sorted[middleIndex]) / 2;\r\n  } else {\r\n    // If the array length is odd, return the middle number\r\n    return sorted[middleIndex];\r\n  }\r\n}\r\n\r\n// Function to calculate the mode of an array of numbers\r\nfunction calculateMode(numbers) {\r\n  const counts = {};\r\n\r\n  // Count the occurrences of each number\r\n  numbers.forEach((num) => {\r\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n  });\r\n\r\n  let mode = null;\r\n  let maxCount = 0;\r\n\r\n  // Find the number(s) with the highest occurrence\r\n  for (const num in counts) {\r\n    if (counts[num] > maxCount) {\r\n      mode = num;\r\n      maxCount = counts[num];\r\n    }\r\n  }\r\n\r\n  return mode;\r\n}\r\n\r\n// Function to calculate class-wise mean, median, and mode of Flavanoids\r\nfunction calculateFlavanoidsStats(data) {\r\n  const classes = {};\r\n\r\n  // Calculate Flavanoids stats for each class\r\n  data.forEach((item) => {\r\n    const className = item.Alcohol;\r\n\r\n    if (!classes[className]) {\r\n      classes[className] = [];\r\n    }\r\n\r\n    classes[className].push(item.Flavanoids);\r\n  });\r\n\r\n  const stats = {};\r\n\r\n  // Calculate mean, median, and mode for each class\r\n  for (const className in classes) {\r\n    const flavanoids = classes[className];\r\n\r\n    stats[className] = {\r\n      mean: calculateMean(flavanoids),\r\n      median: calculateMedian(flavanoids),\r\n      mode: calculateMode(flavanoids),\r\n    };\r\n  }\r\n\r\n  return stats;\r\n}\r\n\r\n// Example usage\r\nconst jsonData = [\r\n  { Alcohol: \"Class 1\", Flavanoids: 1.5 },\r\n  { Alcohol: \"Class 2\", Flavanoids: 2.0 },\r\n  { Alcohol: \"Class 1\", Flavanoids: 1.8 },\r\n  { Alcohol: \"Class 2\", Flavanoids: 2.2 },\r\n  // ... more data\r\n];\r\n\r\nconst flavanoidsStats = calculateFlavanoidsStats(data);\r\n\r\n// Display the results in a tabular format\r\nconsole.log(\"Measure\\t\\t\\tClass 1\\t\\tClass 2\\t\\tClass ...\");\r\nconsole.log(\"Flavanoids Mean\\t\\t\", flavanoidsStats[\"Class 1\"].mean, \"\\t\\t\", flavanoidsStats[\"Class 2\"].mean, \"\\t\\t\", \"...\");\r\nconsole.log(\"Flavanoids Median\\t\", flavanoidsStats[\"Class 1\"].median, \"\\t\\t\", flavanoidsStats[\"Class 2\"].median, \"\\t\\t\", \"...\");\r\nconsole.log(\"Flavanoids Mode\\t\\t\", flavanoidsStats[\"Class 1\"].mode, \"\\t\\t\", flavanoidsStats[\"Class 2\"].mode, \"\\t\\t\", \"...\");\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}