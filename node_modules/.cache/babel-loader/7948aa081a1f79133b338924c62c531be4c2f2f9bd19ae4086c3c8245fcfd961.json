{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataset = [{\n  Alcohol: 'Class 1',\n  Flavanoids: 2.5\n}, {\n  Alcohol: 'Class 1',\n  Flavanoids: 3.2\n}, {\n  Alcohol: 'Class 2',\n  Flavanoids: 2.8\n}, {\n  Alcohol: 'Class 2',\n  Flavanoids: 3.6\n}\n// Add more data entries here...\n];\n\nconst calculateMean = (data, alcoholClass) => {\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\n  const sum = filteredData.reduce((accumulator, entry) => accumulator + entry.Flavanoids, 0);\n  const mean = sum / filteredData.length;\n  return mean.toFixed(2); // Limit decimal places to 2\n};\n\nconst calculateMedian = (data, alcoholClass) => {\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\n  const sortedData = filteredData.sort((a, b) => a.Flavanoids - b.Flavanoids);\n  const middleIndex = Math.floor(sortedData.length / 2);\n  if (sortedData.length % 2 === 0) {\n    // If even number of entries, calculate the average of the middle two values\n    const median = (sortedData[middleIndex - 1].Flavanoids + sortedData[middleIndex].Flavanoids) / 2;\n    return median.toFixed(2); // Limit decimal places to 2\n  } else {\n    // If odd number of entries, return the middle value\n    return sortedData[middleIndex].Flavanoids.toFixed(2); // Limit decimal places to 2\n  }\n};\n\nconst calculateMode = (data, alcoholClass) => {\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\n  const flavanoidsCount = {};\n  let mode = null;\n  let maxCount = 0;\n  filteredData.forEach(entry => {\n    if (flavanoidsCount[entry.Flavanoids]) {\n      flavanoidsCount[entry.Flavanoids]++;\n    } else {\n      flavanoidsCount[entry.Flavanoids] = 1;\n    }\n    if (flavanoidsCount[entry.Flavanoids] > maxCount) {\n      mode = entry.Flavanoids;\n      maxCount = flavanoidsCount[entry.Flavanoids];\n    }\n  });\n  return mode !== null ? mode.toFixed(2) : 'N/A'; // Limit decimal places to 2 or display \"N/A\" if no mode found\n};\n\nconst FlavanoidsStatsTable = () => {\n  const uniqueClasses = Array.from(new Set(dataset.map(entry => entry.Alcohol)));\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), uniqueClasses.map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: alcoholClass\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), uniqueClasses.map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMean(dataset, alcoholClass)\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), uniqueClasses.map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMedian(dataset, alcoholClass)\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this), uniqueClasses.map(alcoholClass => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMode(dataset, alcoholClass)\n        }, alcoholClass, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_c = FlavanoidsStatsTable;\nexport default FlavanoidsStatsTable;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsStatsTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","dataset","Alcohol","Flavanoids","calculateMean","data","alcoholClass","filteredData","filter","entry","sum","reduce","accumulator","mean","length","toFixed","calculateMedian","sortedData","sort","a","b","middleIndex","Math","floor","median","calculateMode","flavanoidsCount","mode","maxCount","forEach","FlavanoidsStatsTable","uniqueClasses","Array","from","Set","map","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst dataset = [\r\n  { Alcohol: 'Class 1', Flavanoids: 2.5 },\r\n  { Alcohol: 'Class 1', Flavanoids: 3.2 },\r\n  { Alcohol: 'Class 2', Flavanoids: 2.8 },\r\n  { Alcohol: 'Class 2', Flavanoids: 3.6 },\r\n  // Add more data entries here...\r\n];\r\n\r\nconst calculateMean = (data, alcoholClass) => {\r\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\r\n  const sum = filteredData.reduce((accumulator, entry) => accumulator + entry.Flavanoids, 0);\r\n  const mean = sum / filteredData.length;\r\n  return mean.toFixed(2); // Limit decimal places to 2\r\n};\r\n\r\nconst calculateMedian = (data, alcoholClass) => {\r\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\r\n  const sortedData = filteredData.sort((a, b) => a.Flavanoids - b.Flavanoids);\r\n  const middleIndex = Math.floor(sortedData.length / 2);\r\n\r\n  if (sortedData.length % 2 === 0) {\r\n    // If even number of entries, calculate the average of the middle two values\r\n    const median = (sortedData[middleIndex - 1].Flavanoids + sortedData[middleIndex].Flavanoids) / 2;\r\n    return median.toFixed(2); // Limit decimal places to 2\r\n  } else {\r\n    // If odd number of entries, return the middle value\r\n    return sortedData[middleIndex].Flavanoids.toFixed(2); // Limit decimal places to 2\r\n  }\r\n};\r\n\r\nconst calculateMode = (data, alcoholClass) => {\r\n  const filteredData = data.filter(entry => entry.Alcohol === alcoholClass);\r\n  const flavanoidsCount = {};\r\n  let mode = null;\r\n  let maxCount = 0;\r\n\r\n  filteredData.forEach(entry => {\r\n    if (flavanoidsCount[entry.Flavanoids]) {\r\n      flavanoidsCount[entry.Flavanoids]++;\r\n    } else {\r\n      flavanoidsCount[entry.Flavanoids] = 1;\r\n    }\r\n\r\n    if (flavanoidsCount[entry.Flavanoids] > maxCount) {\r\n      mode = entry.Flavanoids;\r\n      maxCount = flavanoidsCount[entry.Flavanoids];\r\n    }\r\n  });\r\n\r\n  return mode !== null ? mode.toFixed(2) : 'N/A'; // Limit decimal places to 2 or display \"N/A\" if no mode found\r\n};\r\n\r\nconst FlavanoidsStatsTable = () => {\r\n  const uniqueClasses = Array.from(new Set(dataset.map(entry => entry.Alcohol)));\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {uniqueClasses.map(alcoholClass => (\r\n            <th key={alcoholClass}>{alcoholClass}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {uniqueClasses.map(alcoholClass => (\r\n            <td key={alcoholClass}>{calculateMean(dataset, alcoholClass)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {uniqueClasses.map(alcoholClass => (\r\n            <td key={alcoholClass}>{calculateMedian(dataset, alcoholClass)}</td>\r\n            ))}\r\n            </tr>\r\n            <tr>\r\n              <td>Flavanoids Mode</td>\r\n              {uniqueClasses.map(alcoholClass => (\r\n                <td key={alcoholClass}>{calculateMode(dataset, alcoholClass)}</td>\r\n              ))}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        );\r\n      };\r\n      \r\n      export default FlavanoidsStatsTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}