{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\GammaStatistics.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GammaStatistics = _ref => {\n  _s();\n  let {\n    dataset\n  } = _ref;\n  const [classWiseStats, setClassWiseStats] = useState({});\n  useEffect(() => {\n    calculateGammaStatistics();\n  }, []);\n  const calculateGammaStatistics = () => {\n    const classWiseGamma = {};\n\n    // Calculate Gamma for each point in the dataset and group by class\n    dataset.forEach(dataPoint => {\n      const {\n        Ash,\n        Hue,\n        Magnesium,\n        Class\n      } = dataPoint;\n      const gamma = Ash * Hue / Magnesium;\n      if (!classWiseGamma[Class]) {\n        classWiseGamma[Class] = [];\n      }\n      classWiseGamma[Class].push(gamma);\n    });\n\n    // Calculate mean, median, and mode for each class\n    const classWiseStats = {};\n    Object.keys(classWiseGamma).forEach(className => {\n      const gammas = classWiseGamma[className];\n\n      // Calculate mean\n      const mean = gammas.reduce((sum, gamma) => sum + gamma, 0) / gammas.length;\n\n      // Calculate median\n      const sortedGammas = gammas.sort((a, b) => a - b);\n      const median = sortedGammas[Math.floor(sortedGammas.length / 2)];\n\n      // Calculate mode\n      const mode = calculateMode(gammas);\n      classWiseStats[className] = {\n        mean: mean.toFixed(3),\n        median: median.toFixed(3),\n        mode: mode.toFixed(3)\n      };\n    });\n    setClassWiseStats(classWiseStats);\n  };\n  const calculateMode = arr => {\n    const frequencyMap = {};\n    let maxFrequency = 0;\n    let mode = null;\n    arr.forEach(value => {\n      frequencyMap[value] = frequencyMap[value] ? frequencyMap[value] + 1 : 1;\n      if (frequencyMap[value] > maxFrequency) {\n        maxFrequency = frequencyMap[value];\n        mode = value;\n      }\n    });\n    return mode;\n  };\n  const renderTable = () => {\n    const classList = Object.keys(classWiseStats);\n    const measureList = ['Gamma', 'Mean', 'Median', 'Mode'];\n\n    // Prepare table rows\n    const rows = measureList.map(measure => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: measure\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n        children: classWiseStats[className][measure.toLowerCase()]\n      }, className, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))]\n    }, measure, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this));\n\n    // Return the table component\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", className]\n          }, className, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderTable()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n_s(GammaStatistics, \"2zLe+fxz/dMSi1asikh3PwNo9t8=\");\n_c = GammaStatistics;\nexport default GammaStatistics;\nvar _c;\n$RefreshReg$(_c, \"GammaStatistics\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","GammaStatistics","_ref","_s","dataset","classWiseStats","setClassWiseStats","calculateGammaStatistics","classWiseGamma","forEach","dataPoint","Ash","Hue","Magnesium","Class","gamma","push","Object","keys","className","gammas","mean","reduce","sum","length","sortedGammas","sort","a","b","median","Math","floor","mode","calculateMode","toFixed","arr","frequencyMap","maxFrequency","value","renderTable","classList","measureList","rows","map","measure","children","fileName","_jsxFileName","lineNumber","columnNumber","toLowerCase","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/GammaStatistics.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst GammaStatistics = ({ dataset }) => {\r\n  const [classWiseStats, setClassWiseStats] = useState({});\r\n\r\n  useEffect(() => {\r\n    calculateGammaStatistics();\r\n  }, []);\r\n\r\n  const calculateGammaStatistics = () => {\r\n    const classWiseGamma = {};\r\n\r\n    // Calculate Gamma for each point in the dataset and group by class\r\n    dataset.forEach(dataPoint => {\r\n      const { Ash, Hue, Magnesium, Class } = dataPoint;\r\n      const gamma = (Ash * Hue) / Magnesium;\r\n\r\n      if (!classWiseGamma[Class]) {\r\n        classWiseGamma[Class] = [];\r\n      }\r\n      classWiseGamma[Class].push(gamma);\r\n    });\r\n\r\n    // Calculate mean, median, and mode for each class\r\n    const classWiseStats = {};\r\n    Object.keys(classWiseGamma).forEach(className => {\r\n      const gammas = classWiseGamma[className];\r\n\r\n      // Calculate mean\r\n      const mean = gammas.reduce((sum, gamma) => sum + gamma, 0) / gammas.length;\r\n\r\n      // Calculate median\r\n      const sortedGammas = gammas.sort((a, b) => a - b);\r\n      const median = sortedGammas[Math.floor(sortedGammas.length / 2)];\r\n\r\n      // Calculate mode\r\n      const mode = calculateMode(gammas);\r\n\r\n      classWiseStats[className] = {\r\n        mean: mean.toFixed(3),\r\n        median: median.toFixed(3),\r\n        mode: mode.toFixed(3),\r\n      };\r\n    });\r\n\r\n    setClassWiseStats(classWiseStats);\r\n  };\r\n\r\n  const calculateMode = arr => {\r\n    const frequencyMap = {};\r\n    let maxFrequency = 0;\r\n    let mode = null;\r\n\r\n    arr.forEach(value => {\r\n      frequencyMap[value] = frequencyMap[value] ? frequencyMap[value] + 1 : 1;\r\n      if (frequencyMap[value] > maxFrequency) {\r\n        maxFrequency = frequencyMap[value];\r\n        mode = value;\r\n      }\r\n    });\r\n\r\n    return mode;\r\n  };\r\n\r\n  const renderTable = () => {\r\n    const classList = Object.keys(classWiseStats);\r\n    const measureList = ['Gamma', 'Mean', 'Median', 'Mode'];\r\n\r\n    // Prepare table rows\r\n    const rows = measureList.map(measure => (\r\n      <tr key={measure}>\r\n        <td>{measure}</td>\r\n        {classList.map(className => (\r\n          <td key={className}>{classWiseStats[className][measure.toLowerCase()]}</td>\r\n        ))}\r\n      </tr>\r\n    ));\r\n\r\n    // Return the table component\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {classList.map(className => (\r\n              <th key={className}>Class {className}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{rows}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  return <div>{renderTable()}</div>;\r\n};\r\n\r\nexport default GammaStatistics;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}