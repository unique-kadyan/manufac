{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatasetStats = () => {\n  _s();\n  const [stats, setStats] = useState(null);\n  useEffect(() => {\n    // Read the JSON file\n    fetch('/public/data.json').then(response => response.json()).then(data => {\n      // Calculate class-wise mean, median, and mode\n      const classStats = {};\n      data.forEach(entry => {\n        const alcoholClass = entry.Alcohol;\n        const flavanoids = entry.Flavanoids;\n        if (!classStats[alcoholClass]) {\n          classStats[alcoholClass] = [];\n        }\n        classStats[alcoholClass].push(flavanoids);\n      });\n      const classMeans = {};\n      const classMedians = {};\n      const classModes = {};\n      for (const alcoholClass in classStats) {\n        const classData = classStats[alcoholClass];\n\n        // Calculate mean\n        const mean = classData.reduce((total, value) => total + value, 0) / classData.length;\n        classMeans[alcoholClass] = mean;\n\n        // Calculate median\n        const sortedData = classData.sort((a, b) => a - b);\n        const middleIndex = Math.floor(sortedData.length / 2);\n        const median = sortedData.length % 2 === 0 ? (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2 : sortedData[middleIndex];\n        classMedians[alcoholClass] = median;\n\n        // Calculate mode\n        const mode = calculateMode(classData);\n        classModes[alcoholClass] = mode;\n      }\n\n      // Store the calculated statistics\n      setStats({\n        classMeans,\n        classMedians,\n        classModes\n      });\n    }).catch(error => console.error(error));\n  }, []);\n\n  // Utility function to calculate mode\n  const calculateMode = data => {\n    const frequencyMap = {};\n    let maxFrequency = 0;\n    let mode = null;\n    data.forEach(value => {\n      if (!frequencyMap[value]) {\n        frequencyMap[value] = 0;\n      }\n      frequencyMap[value]++;\n      if (frequencyMap[value] > maxFrequency) {\n        maxFrequency = frequencyMap[value];\n        mode = value;\n      }\n    });\n    return mode;\n  };\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), Object.keys((stats === null || stats === void 0 ? void 0 : stats.classMeans) || {}).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", alcoholClass]\n          }, alcoholClass, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mean\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), Object.values((stats === null || stats === void 0 ? void 0 : stats.classMeans) || {}).map(mean => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: mean\n          }, mean, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 1\n          }, this), Object.values((stats === null || stats === void 0 ? void 0 : stats.classMedians) || {}).map(median => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: median.toFixed(2)\n          }, median, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 1\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 1\n          }, this), Object.values((stats === null || stats === void 0 ? void 0 : stats.classModes) || {}).map(mode => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: mode.toFixed(2)\n          }, mode, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 1\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(DatasetStats, \"QHCAg5+sC7SrLiGx+x4h2IICBFk=\");\n_c = DatasetStats;\nexport default DatasetStats;\nvar _c;\n$RefreshReg$(_c, \"DatasetStats\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DatasetStats","_s","stats","setStats","fetch","then","response","json","data","classStats","forEach","entry","alcoholClass","Alcohol","flavanoids","Flavanoids","push","classMeans","classMedians","classModes","classData","mean","reduce","total","value","length","sortedData","sort","a","b","middleIndex","Math","floor","median","mode","calculateMode","catch","error","console","frequencyMap","maxFrequency","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","values","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst DatasetStats = () => {\r\n  const [stats, setStats] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Read the JSON file\r\n    fetch('/public/data.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Calculate class-wise mean, median, and mode\r\n        const classStats = {};\r\n        data.forEach(entry => {\r\n          const alcoholClass = entry.Alcohol;\r\n          const flavanoids = entry.Flavanoids;\r\n\r\n          if (!classStats[alcoholClass]) {\r\n            classStats[alcoholClass] = [];\r\n          }\r\n\r\n          classStats[alcoholClass].push(flavanoids);\r\n        });\r\n\r\n        const classMeans = {};\r\n        const classMedians = {};\r\n        const classModes = {};\r\n\r\n        for (const alcoholClass in classStats) {\r\n          const classData = classStats[alcoholClass];\r\n\r\n          // Calculate mean\r\n          const mean = classData.reduce((total, value) => total + value, 0) / classData.length;\r\n          classMeans[alcoholClass] = mean;\r\n\r\n          // Calculate median\r\n          const sortedData = classData.sort((a, b) => a - b);\r\n          const middleIndex = Math.floor(sortedData.length / 2);\r\n          const median = sortedData.length % 2 === 0 ? (sortedData[middleIndex - 1] + sortedData[middleIndex]) / 2 : sortedData[middleIndex];\r\n          classMedians[alcoholClass] = median;\r\n\r\n          // Calculate mode\r\n          const mode = calculateMode(classData);\r\n          classModes[alcoholClass] = mode;\r\n        }\r\n\r\n        // Store the calculated statistics\r\n        setStats({ classMeans, classMedians, classModes });\r\n      })\r\n      .catch(error => console.error(error));\r\n  }, []);\r\n\r\n  // Utility function to calculate mode\r\n  const calculateMode = (data) => {\r\n    const frequencyMap = {};\r\n    let maxFrequency = 0;\r\n    let mode = null;\r\n\r\n    data.forEach(value => {\r\n      if (!frequencyMap[value]) {\r\n        frequencyMap[value] = 0;\r\n      }\r\n\r\n      frequencyMap[value]++;\r\n\r\n      if (frequencyMap[value] > maxFrequency) {\r\n        maxFrequency = frequencyMap[value];\r\n        mode = value;\r\n      }\r\n    });\r\n\r\n    return mode;\r\n  };\r\n\r\n  // Render the component\r\n  return (\r\n    <div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {Object.keys(stats?.classMeans || {}).map(alcoholClass => (\r\n              <th key={alcoholClass}>Class {alcoholClass}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids Mean</td>\r\n            {Object.values(stats?.classMeans || {}).map(mean => (\r\n              <\r\ntd key={mean}>{mean}</td>\r\n))}\r\n</tr>\r\n<tr>\r\n<td>Flavanoids Median</td>\r\n{Object.values(stats?.classMedians || {}).map(median => (\r\n<td key={median}>{median.toFixed(2)}</td>\r\n))}\r\n</tr>\r\n<tr>\r\n<td>Flavanoids Mode</td>\r\n{Object.values(stats?.classModes || {}).map(mode => (\r\n<td key={mode}>{mode.toFixed(2)}</td>\r\n))}\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n);\r\n};\r\n\r\nexport default DatasetStats;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}