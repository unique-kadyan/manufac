{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\n\n// Sample dataset\nimport data from '../dataset.json';\n\n// Utility function to calculate class-wise mean of Flavanoids\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getClassMean = alcoholClass => {\n  const classData = data.filter(d => d.Alcohol === alcoholClass);\n  const sum = classData.reduce((acc, d) => acc + d.Flavanoids, 0);\n  return sum / classData.length;\n};\n\n// Utility function to calculate class-wise median of Flavanoids\nconst getClassMedian = alcoholClass => {\n  const classData = data.filter(d => d.Alcohol === alcoholClass);\n  const sortedData = classData.sort((a, b) => a.Flavanoids - b.Flavanoids);\n  const middle = Math.floor(sortedData.length / 2);\n  if (sortedData.length % 2 === 0) {\n    return (sortedData[middle - 1].Flavanoids + sortedData[middle].Flavanoids) / 2;\n  }\n  return sortedData[middle].Flavanoids;\n};\n\n// Utility function to calculate class-wise mode of Flavanoids\nconst getClassMode = alcoholClass => {\n  const classData = data.filter(d => d.Alcohol === alcoholClass);\n  const counts = {};\n  let mode = null;\n  let maxCount = 0;\n  for (const d of classData) {\n    counts[d.Flavanoids] = (counts[d.Flavanoids] || 0) + 1;\n    if (counts[d.Flavanoids] > maxCount) {\n      mode = d.Flavanoids;\n      maxCount = counts[d.Flavanoids];\n    }\n  }\n  return mode;\n};\n\n// React component to display class-wise mean, median, and mode of Flavanoids\nconst FlavanoidsTable = () => {\n  const classes = [...new Set(data.map(d => d.Alcohol))];\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    style: {\n      minWidth: \"auto\",\n      columnGap: '85%',\n      columnWidth: '25%',\n      flexWrap: 'wrap',\n      flexGrow: 'initial'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), classes.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", c]\n        }, c, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), classes.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: getClassMean(c).toFixed(2)\n        }, c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), classes.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: getClassMedian(c).toFixed(2)\n        }, c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), classes.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: getClassMode(c)\n        }, c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_c = FlavanoidsTable;\nexport default FlavanoidsTable;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsTable\");","map":{"version":3,"names":["React","data","jsxDEV","_jsxDEV","getClassMean","alcoholClass","classData","filter","d","Alcohol","sum","reduce","acc","Flavanoids","length","getClassMedian","sortedData","sort","a","b","middle","Math","floor","getClassMode","counts","mode","maxCount","FlavanoidsTable","classes","Set","map","style","minWidth","columnGap","columnWidth","flexWrap","flexGrow","children","fileName","_jsxFileName","lineNumber","columnNumber","c","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Sample dataset\r\nimport data from '../dataset.json';\r\n\r\n// Utility function to calculate class-wise mean of Flavanoids\r\nconst getClassMean = (alcoholClass) => {\r\n  const classData = data.filter((d) => d.Alcohol === alcoholClass);\r\n  const sum = classData.reduce((acc, d) => acc + d.Flavanoids, 0);\r\n  return sum / classData.length;\r\n};\r\n\r\n// Utility function to calculate class-wise median of Flavanoids\r\nconst getClassMedian = (alcoholClass) => {\r\n  const classData = data.filter((d) => d.Alcohol === alcoholClass);\r\n  const sortedData = classData.sort((a, b) => a.Flavanoids - b.Flavanoids);\r\n  const middle = Math.floor(sortedData.length / 2);\r\n  if (sortedData.length % 2 === 0) {\r\n    return (sortedData[middle - 1].Flavanoids + sortedData[middle].Flavanoids) / 2;\r\n  }\r\n  return sortedData[middle].Flavanoids;\r\n};\r\n\r\n// Utility function to calculate class-wise mode of Flavanoids\r\nconst getClassMode = (alcoholClass) => {\r\n  const classData = data.filter((d) => d.Alcohol === alcoholClass);\r\n  const counts = {};\r\n  let mode = null;\r\n  let maxCount = 0;\r\n  for (const d of classData) {\r\n    counts[d.Flavanoids] = (counts[d.Flavanoids] || 0) + 1;\r\n    if (counts[d.Flavanoids] > maxCount) {\r\n      mode = d.Flavanoids;\r\n      maxCount = counts[d.Flavanoids];\r\n    }\r\n  }\r\n  return mode;\r\n};\r\n\r\n// React component to display class-wise mean, median, and mode of Flavanoids\r\nconst FlavanoidsTable = () => {\r\n  const classes = [...new Set(data.map((d) => d.Alcohol))];\r\n  return (\r\n    <table style={{minWidth: \"auto\",\r\n      \r\n      columnGap:'85%',columnWidth:'25%', flexWrap:'wrap', flexGrow:'initial'}} >\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {classes.map((c) => (\r\n            <th key={c}>Class {c}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {classes.map((c) => (\r\n            <td key={c}>{getClassMean(c).toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {classes.map((c) => (\r\n            <td key={c}>{getClassMedian(c).toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {classes.map((c) => (\r\n            <td key={c}>{getClassMode(c)}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default FlavanoidsTable;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAOC,IAAI,MAAM,iBAAiB;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAIC,YAAY,IAAK;EACrC,MAAMC,SAAS,GAAGL,IAAI,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKJ,YAAY,CAAC;EAChE,MAAMK,GAAG,GAAGJ,SAAS,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,CAAC,KAAKI,GAAG,GAAGJ,CAAC,CAACK,UAAU,EAAE,CAAC,CAAC;EAC/D,OAAOH,GAAG,GAAGJ,SAAS,CAACQ,MAAM;AAC/B,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIV,YAAY,IAAK;EACvC,MAAMC,SAAS,GAAGL,IAAI,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKJ,YAAY,CAAC;EAChE,MAAMW,UAAU,GAAGV,SAAS,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,UAAU,GAAGM,CAAC,CAACN,UAAU,CAAC;EACxE,MAAMO,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAACF,MAAM,GAAG,CAAC,CAAC;EAChD,IAAIE,UAAU,CAACF,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC/B,OAAO,CAACE,UAAU,CAACI,MAAM,GAAG,CAAC,CAAC,CAACP,UAAU,GAAGG,UAAU,CAACI,MAAM,CAAC,CAACP,UAAU,IAAI,CAAC;EAChF;EACA,OAAOG,UAAU,CAACI,MAAM,CAAC,CAACP,UAAU;AACtC,CAAC;;AAED;AACA,MAAMU,YAAY,GAAIlB,YAAY,IAAK;EACrC,MAAMC,SAAS,GAAGL,IAAI,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKJ,YAAY,CAAC;EAChE,MAAMmB,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,QAAQ,GAAG,CAAC;EAChB,KAAK,MAAMlB,CAAC,IAAIF,SAAS,EAAE;IACzBkB,MAAM,CAAChB,CAAC,CAACK,UAAU,CAAC,GAAG,CAACW,MAAM,CAAChB,CAAC,CAACK,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAIW,MAAM,CAAChB,CAAC,CAACK,UAAU,CAAC,GAAGa,QAAQ,EAAE;MACnCD,IAAI,GAAGjB,CAAC,CAACK,UAAU;MACnBa,QAAQ,GAAGF,MAAM,CAAChB,CAAC,CAACK,UAAU,CAAC;IACjC;EACF;EACA,OAAOY,IAAI;AACb,CAAC;;AAED;AACA,MAAME,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,OAAO,GAAG,CAAC,GAAG,IAAIC,GAAG,CAAC5B,IAAI,CAAC6B,GAAG,CAAEtB,CAAC,IAAKA,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;EACxD,oBACEN,OAAA;IAAO4B,KAAK,EAAE;MAACC,QAAQ,EAAE,MAAM;MAE7BC,SAAS,EAAC,KAAK;MAACC,WAAW,EAAC,KAAK;MAAEC,QAAQ,EAAC,MAAM;MAAEC,QAAQ,EAAC;IAAS,CAAE;IAAAC,QAAA,gBACxElC,OAAA;MAAAkC,QAAA,eACElC,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,EAAI;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACfb,OAAO,CAACE,GAAG,CAAEY,CAAC,iBACbvC,OAAA;UAAAkC,QAAA,GAAY,QAAM,EAACK,CAAC;QAAA,GAAXA,CAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAC1B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACRtC,OAAA;MAAAkC,QAAA,gBACElC,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACvBb,OAAO,CAACE,GAAG,CAAEY,CAAC,iBACbvC,OAAA;UAAAkC,QAAA,EAAajC,YAAY,CAACsC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAAC,GAA9BD,CAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkC,CAC7C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLtC,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,EAAI;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACzBb,OAAO,CAACE,GAAG,CAAEY,CAAC,iBACbvC,OAAA;UAAAkC,QAAA,EAAatB,cAAc,CAAC2B,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAAC,GAAhCD,CAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoC,CAC/C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLtC,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACvBb,OAAO,CAACE,GAAG,CAAEY,CAAC,iBACbvC,OAAA;UAAAkC,QAAA,EAAad,YAAY,CAACmB,CAAC;QAAC,GAAnBA,CAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuB,CAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEZ,CAAC;AAACG,EAAA,GApCIjB,eAAe;AAsCrB,eAAeA,eAAe;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}