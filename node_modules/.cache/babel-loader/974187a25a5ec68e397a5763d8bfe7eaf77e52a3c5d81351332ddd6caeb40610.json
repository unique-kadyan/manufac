{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\n// assume the dataset is an array of objects with \"Alcohol\" and \"Flavanoids\" properties\nimport dataset from './data.json';\n\n// const dataset = [\n//   { Alcohol: \"class A\", Flavanoids: 1.5 },\n//   { Alcohol: \"class A\", Flavanoids: 2.0 },\n//   { Alcohol: \"class B\", Flavanoids: 2.5 },\n//   { Alcohol: \"class B\", Flavanoids: 3.0 },\n//   { Alcohol: \"class B\", Flavanoids: 3.5 },\n//   { Alcohol: \"class C\", Flavanoids: 4.0 },\n//   { Alcohol: \"class C\", Flavanoids: 4.5 },\n//   { Alcohol: \"class C\", Flavanoids: 5.0 },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getClassWiseFlavanoidStats(dataset) {\n  // group the dataset by alcohol class\n  const classGroups = dataset.reduce((acc, curr) => {\n    const {\n      Alcohol,\n      Flavanoids\n    } = curr;\n    if (!acc[Alcohol]) {\n      acc[Alcohol] = [];\n    }\n    acc[Alcohol].push(Flavanoids);\n    return acc;\n  }, {});\n\n  // calculate the mean, median, and mode for each alcohol class\n  const stats = Object.entries(classGroups).map(_ref => {\n    let [alcoholClass, flavanoids] = _ref;\n    const mean = flavanoids.reduce((acc, curr) => acc + curr, 0) / flavanoids.length;\n    const median = calculateMedian(flavanoids);\n    const mode = calculateMode(flavanoids);\n    return {\n      alcoholClass,\n      mean,\n      median,\n      mode\n    };\n  });\n  return stats;\n}\nfunction calculateMedian(arr) {\n  arr.sort((a, b) => a - b);\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 !== 0 ? arr[mid] : (arr[mid - 1] + arr[mid]) / 2;\n}\nfunction calculateMode(arr) {\n  const freq = {};\n  arr.forEach(item => {\n    freq[item] = freq[item] ? freq[item] + 1 : 1;\n  });\n  let maxFreq = 0;\n  let mode = null;\n  for (const [item, itemFreq] of Object.entries(freq)) {\n    if (itemFreq > maxFreq) {\n      maxFreq = itemFreq;\n      mode = item;\n    }\n  }\n  return mode;\n}\nfunction FlavanoidStats(_ref2) {\n  let {\n    dataset\n  } = _ref2;\n  const stats = getClassWiseFlavanoidStats(dataset);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Alcohol Class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: stats.map(_ref3 => {\n        let {\n          alcoholClass,\n          mean,\n          median,\n          mode\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: alcoholClass\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: mean.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: median\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this)]\n        }, alcoholClass, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c = FlavanoidStats;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidStats\");","map":{"version":3,"names":["dataset","jsxDEV","_jsxDEV","getClassWiseFlavanoidStats","classGroups","reduce","acc","curr","Alcohol","Flavanoids","push","stats","Object","entries","map","_ref","alcoholClass","flavanoids","mean","length","median","calculateMedian","mode","calculateMode","arr","sort","a","b","mid","Math","floor","freq","forEach","item","maxFreq","itemFreq","FlavanoidStats","_ref2","children","fileName","_jsxFileName","lineNumber","columnNumber","_ref3","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["// assume the dataset is an array of objects with \"Alcohol\" and \"Flavanoids\" properties\r\nimport dataset from './data.json';\r\n\r\n// const dataset = [\r\n//   { Alcohol: \"class A\", Flavanoids: 1.5 },\r\n//   { Alcohol: \"class A\", Flavanoids: 2.0 },\r\n//   { Alcohol: \"class B\", Flavanoids: 2.5 },\r\n//   { Alcohol: \"class B\", Flavanoids: 3.0 },\r\n//   { Alcohol: \"class B\", Flavanoids: 3.5 },\r\n//   { Alcohol: \"class C\", Flavanoids: 4.0 },\r\n//   { Alcohol: \"class C\", Flavanoids: 4.5 },\r\n//   { Alcohol: \"class C\", Flavanoids: 5.0 },\r\n// ];\r\n\r\nfunction getClassWiseFlavanoidStats(dataset) {\r\n  // group the dataset by alcohol class\r\n  const classGroups = dataset.reduce((acc, curr) => {\r\n    const { Alcohol, Flavanoids } = curr;\r\n    if (!acc[Alcohol]) {\r\n      acc[Alcohol] = [];\r\n    }\r\n    acc[Alcohol].push(Flavanoids);\r\n    return acc;\r\n  }, {});\r\n\r\n  // calculate the mean, median, and mode for each alcohol class\r\n  const stats = Object.entries(classGroups).map(([alcoholClass, flavanoids]) => {\r\n    const mean = flavanoids.reduce((acc, curr) => acc + curr, 0) / flavanoids.length;\r\n    const median = calculateMedian(flavanoids);\r\n    const mode = calculateMode(flavanoids);\r\n    return { alcoholClass, mean, median, mode };\r\n  });\r\n\r\n  return stats;\r\n}\r\n\r\nfunction calculateMedian(arr) {\r\n  arr.sort((a, b) => a - b);\r\n  const mid = Math.floor(arr.length / 2);\r\n  return arr.length % 2 !== 0 ? arr[mid] : (arr[mid - 1] + arr[mid]) / 2;\r\n}\r\n\r\nfunction calculateMode(arr) {\r\n  const freq = {};\r\n  arr.forEach((item) => {\r\n    freq[item] = freq[item] ? freq[item] + 1 : 1;\r\n  });\r\n\r\n  let maxFreq = 0;\r\n  let mode = null;\r\n  for (const [item, itemFreq] of Object.entries(freq)) {\r\n    if (itemFreq > maxFreq) {\r\n      maxFreq = itemFreq;\r\n      mode = item;\r\n    }\r\n  }\r\n\r\n  return mode;\r\n}\r\n\r\nfunction FlavanoidStats({ dataset }) {\r\n  const stats = getClassWiseFlavanoidStats(dataset);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Alcohol Class</th>\r\n          <th>Mean</th>\r\n          <th>Median</th>\r\n          <th>Mode</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {stats.map(({ alcoholClass, mean, median, mode }) => (\r\n          <tr key={alcoholClass}>\r\n          <td>{alcoholClass}</td>\r\n          <td>{mean.toFixed(2)}</td>\r\n          <td>{median}</td>\r\n          <td>{mode}</td>\r\n          </tr>\r\n          ))}\r\n          </tbody>\r\n          </table>\r\n          );\r\n          }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}