{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport data from '../dataset.json';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FlavanoidsStats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.calculateMean = className => {\n      const {\n        dataset\n      } = this.state;\n      const classData = dataset.filter(entry => entry.Alcohol === className);\n      const flavanoidValues = classData.map(entry => entry.Flavanoids);\n      const mean = flavanoidValues.reduce((acc, val) => acc + val, 0) / flavanoidValues.length;\n      return mean.toFixed(2); // Adjust the decimal places as needed\n    };\n    this.calculateMedian = className => {\n      const {\n        dataset\n      } = this.state;\n      const classData = dataset.filter(entry => entry.Alcohol === className);\n      const sortedFlavanoids = classData.map(entry => entry.Flavanoids).sort((a, b) => a - b);\n      const medianIndex = Math.floor(sortedFlavanoids.length / 2);\n      const median = sortedFlavanoids.length % 2 === 0 ? (sortedFlavanoids[medianIndex - 1] + sortedFlavanoids[medianIndex]) / 2 : sortedFlavanoids[medianIndex];\n      return median.toFixed(2); // Adjust the decimal places as needed\n    };\n    this.calculateMode = className => {\n      const {\n        dataset\n      } = this.state;\n      const classData = dataset.filter(entry => entry.Alcohol === className);\n      const flavanoidCounts = {};\n      let mode = null;\n      let maxCount = 0;\n      classData.forEach(entry => {\n        if (!flavanoidCounts[entry.Flavanoids]) {\n          flavanoidCounts[entry.Flavanoids] = 1;\n        } else {\n          flavanoidCounts[entry.Flavanoids]++;\n        }\n        if (flavanoidCounts[entry.Flavanoids] > maxCount) {\n          mode = entry.Flavanoids;\n          maxCount = flavanoidCounts[entry.Flavanoids];\n        }\n      });\n      return mode;\n    };\n    this.state = {\n      dataset: data,\n      classList: ['Class 1', 'Class 2'] // Update with your actual class names\n    };\n  }\n\n  render() {\n    const {\n      classList\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: className\n          }, className, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mean\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.calculateMean(className)\n          }, className, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.calculateMedian(className)\n          }, className, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), classList.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.calculateMode(className)\n          }, className, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FlavanoidsStats;","map":{"version":3,"names":["data","React","jsxDEV","_jsxDEV","FlavanoidsStats","Component","constructor","props","calculateMean","className","dataset","state","classData","filter","entry","Alcohol","flavanoidValues","map","Flavanoids","mean","reduce","acc","val","length","toFixed","calculateMedian","sortedFlavanoids","sort","a","b","medianIndex","Math","floor","median","calculateMode","flavanoidCounts","mode","maxCount","forEach","classList","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import data from '../dataset.json';\r\n\r\nimport React from 'react';\r\n\r\nclass FlavanoidsStats extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dataset: data,\r\n      classList: ['Class 1', 'Class 2'], // Update with your actual class names\r\n    };\r\n  }\r\n\r\n  calculateMean = (className) => {\r\n    const { dataset } = this.state;\r\n    const classData = dataset.filter((entry) => entry.Alcohol === className);\r\n    const flavanoidValues = classData.map((entry) => entry.Flavanoids);\r\n    const mean = flavanoidValues.reduce((acc, val) => acc + val, 0) / flavanoidValues.length;\r\n    return mean.toFixed(2); // Adjust the decimal places as needed\r\n  };\r\n\r\n  calculateMedian = (className) => {\r\n    const { dataset } = this.state;\r\n    const classData = dataset.filter((entry) => entry.Alcohol === className);\r\n    const sortedFlavanoids = classData.map((entry) => entry.Flavanoids).sort((a, b) => a - b);\r\n    const medianIndex = Math.floor(sortedFlavanoids.length / 2);\r\n    const median = sortedFlavanoids.length % 2 === 0\r\n      ? (sortedFlavanoids[medianIndex - 1] + sortedFlavanoids[medianIndex]) / 2\r\n      : sortedFlavanoids[medianIndex];\r\n    return median.toFixed(2); // Adjust the decimal places as needed\r\n  };\r\n\r\n  calculateMode = (className) => {\r\n    const { dataset } = this.state;\r\n    const classData = dataset.filter((entry) => entry.Alcohol === className);\r\n    const flavanoidCounts = {};\r\n    let mode = null;\r\n    let maxCount = 0;\r\n    classData.forEach((entry) => {\r\n      if (!flavanoidCounts[entry.Flavanoids]) {\r\n        flavanoidCounts[entry.Flavanoids] = 1;\r\n      } else {\r\n        flavanoidCounts[entry.Flavanoids]++;\r\n      }\r\n      if (flavanoidCounts[entry.Flavanoids] > maxCount) {\r\n        mode = entry.Flavanoids;\r\n        maxCount = flavanoidCounts[entry.Flavanoids];\r\n      }\r\n    });\r\n    return mode;\r\n  };\r\n\r\n  render() {\r\n    const { classList } = this.state;\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {classList.map((className) => (\r\n              <th key={className}>{className}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids Mean</td>\r\n            {classList.map((className) => (\r\n              <td key={className}>{this.calculateMean(className)}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids Median</td>\r\n            {classList.map((className) => (\r\n              <td key={className}>{this.calculateMedian(className)}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids Mode</td>\r\n            {classList.map((className) => (\r\n              <td key={className}>{this.calculateMode(className)}</td>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\nexport default FlavanoidsStats;\r\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAElC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,eAAe,SAASH,KAAK,CAACI,SAAS,CAAC;EAC5CC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAOfC,aAAa,GAAIC,SAAS,IAAK;MAC7B,MAAM;QAAEC;MAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;MAC9B,MAAMC,SAAS,GAAGF,OAAO,CAACG,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKN,SAAS,CAAC;MACxE,MAAMO,eAAe,GAAGJ,SAAS,CAACK,GAAG,CAAEH,KAAK,IAAKA,KAAK,CAACI,UAAU,CAAC;MAClE,MAAMC,IAAI,GAAGH,eAAe,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,GAAGN,eAAe,CAACO,MAAM;MACxF,OAAOJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IAAA,KAEDC,eAAe,GAAIhB,SAAS,IAAK;MAC/B,MAAM;QAAEC;MAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;MAC9B,MAAMC,SAAS,GAAGF,OAAO,CAACG,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKN,SAAS,CAAC;MACxE,MAAMiB,gBAAgB,GAAGd,SAAS,CAACK,GAAG,CAAEH,KAAK,IAAKA,KAAK,CAACI,UAAU,CAAC,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;MACzF,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,gBAAgB,CAACH,MAAM,GAAG,CAAC,CAAC;MAC3D,MAAMU,MAAM,GAAGP,gBAAgB,CAACH,MAAM,GAAG,CAAC,KAAK,CAAC,GAC5C,CAACG,gBAAgB,CAACI,WAAW,GAAG,CAAC,CAAC,GAAGJ,gBAAgB,CAACI,WAAW,CAAC,IAAI,CAAC,GACvEJ,gBAAgB,CAACI,WAAW,CAAC;MACjC,OAAOG,MAAM,CAACT,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAAA,KAEDU,aAAa,GAAIzB,SAAS,IAAK;MAC7B,MAAM;QAAEC;MAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;MAC9B,MAAMC,SAAS,GAAGF,OAAO,CAACG,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKN,SAAS,CAAC;MACxE,MAAM0B,eAAe,GAAG,CAAC,CAAC;MAC1B,IAAIC,IAAI,GAAG,IAAI;MACf,IAAIC,QAAQ,GAAG,CAAC;MAChBzB,SAAS,CAAC0B,OAAO,CAAExB,KAAK,IAAK;QAC3B,IAAI,CAACqB,eAAe,CAACrB,KAAK,CAACI,UAAU,CAAC,EAAE;UACtCiB,eAAe,CAACrB,KAAK,CAACI,UAAU,CAAC,GAAG,CAAC;QACvC,CAAC,MAAM;UACLiB,eAAe,CAACrB,KAAK,CAACI,UAAU,CAAC,EAAE;QACrC;QACA,IAAIiB,eAAe,CAACrB,KAAK,CAACI,UAAU,CAAC,GAAGmB,QAAQ,EAAE;UAChDD,IAAI,GAAGtB,KAAK,CAACI,UAAU;UACvBmB,QAAQ,GAAGF,eAAe,CAACrB,KAAK,CAACI,UAAU,CAAC;QAC9C;MACF,CAAC,CAAC;MACF,OAAOkB,IAAI;IACb,CAAC;IA3CC,IAAI,CAACzB,KAAK,GAAG;MACXD,OAAO,EAAEV,IAAI;MACbuC,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAE;IACrC,CAAC;EACH;;EAyCAC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAED;IAAU,CAAC,GAAG,IAAI,CAAC5B,KAAK;IAEhC,oBACER,OAAA;MAAAsC,QAAA,gBACEtC,OAAA;QAAAsC,QAAA,eACEtC,OAAA;UAAAsC,QAAA,gBACEtC,OAAA;YAAAsC,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACfN,SAAS,CAACtB,GAAG,CAAER,SAAS,iBACvBN,OAAA;YAAAsC,QAAA,EAAqBhC;UAAS,GAArBA,SAAS;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB,CACpC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR1C,OAAA;QAAAsC,QAAA,gBACEtC,OAAA;UAAAsC,QAAA,gBACEtC,OAAA;YAAAsC,QAAA,EAAI;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACvBN,SAAS,CAACtB,GAAG,CAAER,SAAS,iBACvBN,OAAA;YAAAsC,QAAA,EAAqB,IAAI,CAACjC,aAAa,CAACC,SAAS;UAAC,GAAzCA,SAAS;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CACxD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACL1C,OAAA;UAAAsC,QAAA,gBACEtC,OAAA;YAAAsC,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACzBN,SAAS,CAACtB,GAAG,CAAER,SAAS,iBACvBN,OAAA;YAAAsC,QAAA,EAAqB,IAAI,CAAChB,eAAe,CAAChB,SAAS;UAAC,GAA3CA,SAAS;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAuC,CAC1D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACL1C,OAAA;UAAAsC,QAAA,gBACEtC,OAAA;YAAAsC,QAAA,EAAI;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACvBN,SAAS,CAACtB,GAAG,CAAER,SAAS,iBACvBN,OAAA;YAAAsC,QAAA,EAAqB,IAAI,CAACP,aAAa,CAACzB,SAAS;UAAC,GAAzCA,SAAS;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CACxD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEZ;AACF;AACA,eAAezC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}