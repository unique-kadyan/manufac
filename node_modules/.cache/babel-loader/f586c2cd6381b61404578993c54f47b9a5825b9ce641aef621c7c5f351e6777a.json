{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from \"react\";\nimport dataset from \"../dataset.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateMean = data => {\n  const sum = data.reduce((acc, entry) => acc + entry.Flavanoids, 0);\n  return sum / data.length;\n};\nconst calculateMedian = data => {\n  const sortedData = data.slice().sort((a, b) => a.Flavanoids - b.Flavanoids);\n  const middleIndex = Math.floor(sortedData.length / 2);\n  if (sortedData.length % 2 === 0) {\n    const medianA = sortedData[middleIndex - 1].Flavanoids;\n    const medianB = sortedData[middleIndex].Flavanoids;\n    return (medianA + medianB) / 2;\n  }\n  return sortedData[middleIndex].Flavanoids;\n};\nconst calculateMode = data => {\n  const frequencyMap = {};\n  for (const entry of data) {\n    const {\n      Alcohol,\n      Flavanoids\n    } = entry;\n    if (!frequencyMap[Alcohol]) {\n      frequencyMap[Alcohol] = {};\n    }\n    if (!frequencyMap[Alcohol][Flavanoids]) {\n      frequencyMap[Alcohol][Flavanoids] = 0;\n    }\n    frequencyMap[Alcohol][Flavanoids]++;\n  }\n  let mode = null;\n  let maxFrequency = 0;\n  for (const alcohol in frequencyMap) {\n    for (const flavanoid in frequencyMap[alcohol]) {\n      const frequency = frequencyMap[alcohol][flavanoid];\n      if (frequency > maxFrequency) {\n        mode = parseFloat(flavanoid);\n        maxFrequency = frequency;\n      }\n    }\n  }\n  return mode;\n};\nconst FlavanoidsStatsTable = () => {\n  const classes = [...new Set(dataset.map(entry => entry.Alcohol))];\n  const mean = calculateMean(dataset);\n  const median = calculateMedian(dataset);\n  const mode = calculateMode(dataset);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), classes.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", className]\n        }, className, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), classes.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: mean\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), classes.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: median\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), classes.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: mode\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_c = FlavanoidsStatsTable;\nexport default FlavanoidsStatsTable;\nvar _c;\n$RefreshReg$(_c, \"FlavanoidsStatsTable\");","map":{"version":3,"names":["React","dataset","jsxDEV","_jsxDEV","calculateMean","data","sum","reduce","acc","entry","Flavanoids","length","calculateMedian","sortedData","slice","sort","a","b","middleIndex","Math","floor","medianA","medianB","calculateMode","frequencyMap","Alcohol","mode","maxFrequency","alcohol","flavanoid","frequency","parseFloat","FlavanoidsStatsTable","classes","Set","map","mean","median","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from \"react\";\r\nimport dataset from \"../dataset.json\";\r\n\r\nconst calculateMean = (data) => {\r\n  const sum = data.reduce((acc, entry) => acc + entry.Flavanoids, 0);\r\n  return sum / data.length;\r\n};\r\n\r\nconst calculateMedian = (data) => {\r\n  const sortedData = data.slice().sort((a, b) => a.Flavanoids - b.Flavanoids);\r\n  const middleIndex = Math.floor(sortedData.length / 2);\r\n  \r\n  if (sortedData.length % 2 === 0) {\r\n    const medianA = sortedData[middleIndex - 1].Flavanoids;\r\n    const medianB = sortedData[middleIndex].Flavanoids;\r\n    return (medianA + medianB) / 2;\r\n  }\r\n  \r\n  return sortedData[middleIndex].Flavanoids;\r\n};\r\n\r\nconst calculateMode = (data) => {\r\n  const frequencyMap = {};\r\n\r\n  for (const entry of data) {\r\n    const { Alcohol, Flavanoids } = entry;\r\n    if (!frequencyMap[Alcohol]) {\r\n      frequencyMap[Alcohol] = {};\r\n    }\r\n    if (!frequencyMap[Alcohol][Flavanoids]) {\r\n      frequencyMap[Alcohol][Flavanoids] = 0;\r\n    }\r\n    frequencyMap[Alcohol][Flavanoids]++;\r\n  }\r\n\r\n  let mode = null;\r\n  let maxFrequency = 0;\r\n\r\n  for (const alcohol in frequencyMap) {\r\n    for (const flavanoid in frequencyMap[alcohol]) {\r\n      const frequency = frequencyMap[alcohol][flavanoid];\r\n      if (frequency > maxFrequency) {\r\n        mode = parseFloat(flavanoid);\r\n        maxFrequency = frequency;\r\n      }\r\n    }\r\n  }\r\n\r\n  return mode;\r\n};\r\n\r\nconst FlavanoidsStatsTable = () => {\r\n  const classes = [...new Set(dataset.map((entry) => entry.Alcohol))];\r\n  const mean = calculateMean(dataset);\r\n  const median = calculateMedian(dataset);\r\n  const mode = calculateMode(dataset);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {classes.map((className) => (\r\n            <th key={className}>Class {className}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {classes.map((className) => (\r\n            <td key={className}>{mean}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {classes.map((className) => (\r\n            <td key={className}>{median}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {classes.map((className) => (\r\n            <td key={className}>{mode}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default FlavanoidsStatsTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}