{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FlavanoidsStats extends React.Component {\n  constructor() {\n    super(...arguments);\n    // Utility function to calculate the mean of an array\n    this.calculateMean = arr => {\n      const sum = arr.reduce((acc, val) => acc + val, 0);\n      return sum / arr.length;\n    };\n    // Utility function to calculate the median of an array\n    this.calculateMedian = arr => {\n      const sortedArr = arr.slice().sort((a, b) => a - b);\n      const middleIndex = Math.floor(sortedArr.length / 2);\n      if (sortedArr.length % 2 === 0) {\n        return (sortedArr[middleIndex - 1] + sortedArr[middleIndex]) / 2;\n      } else {\n        return sortedArr[middleIndex];\n      }\n    };\n    // Utility function to calculate the mode of an array\n    this.calculateMode = arr => {\n      const frequencyMap = {};\n      let maxFrequency = 0;\n      let modes = [];\n      arr.forEach(value => {\n        frequencyMap[value] = (frequencyMap[value] || 0) + 1;\n        if (frequencyMap[value] > maxFrequency) {\n          maxFrequency = frequencyMap[value];\n          modes = [value];\n        } else if (frequencyMap[value] === maxFrequency) {\n          modes.push(value);\n        }\n      });\n      return modes;\n    };\n  }\n  render() {\n    const {\n      dataset\n    } = this.props;\n\n    // Extract unique class values\n    const classes = [...new Set(dataset.map(item => item.Alcohol))];\n\n    // Calculate class-wise mean, median, and mode of Flavanoids\n    const flavanoidsStats = classes.reduce((stats, cls) => {\n      const classData = dataset.filter(item => item.Alcohol === cls);\n      const flavanoids = classData.map(item => item.Flavanoids);\n      stats[cls] = {\n        mean: this.calculateMean(flavanoids),\n        median: this.calculateMedian(flavanoids),\n        mode: this.calculateMode(flavanoids)\n      };\n      return stats;\n    }, {});\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), classes.map(cls => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [\"Class \", cls]\n          }, cls, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mean\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), classes.map(cls => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flavanoidsStats[cls].mean.toFixed(2)\n          }, cls, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Median\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), classes.map(cls => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flavanoidsStats[cls].median.toFixed(2)\n          }, cls, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), classes.map(cls => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flavanoidsStats[cls].mode.join(', ')\n          }, cls, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default FlavanoidsStats;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FlavanoidsStats","Component","constructor","arguments","calculateMean","arr","sum","reduce","acc","val","length","calculateMedian","sortedArr","slice","sort","a","b","middleIndex","Math","floor","calculateMode","frequencyMap","maxFrequency","modes","forEach","value","push","render","dataset","props","classes","Set","map","item","Alcohol","flavanoidsStats","stats","cls","classData","filter","flavanoids","Flavanoids","mean","median","mode","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","join"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nclass FlavanoidsStats extends React.Component {\r\n  // Utility function to calculate the mean of an array\r\n  calculateMean = (arr) => {\r\n    const sum = arr.reduce((acc, val) => acc + val, 0);\r\n    return sum / arr.length;\r\n  };\r\n\r\n  // Utility function to calculate the median of an array\r\n  calculateMedian = (arr) => {\r\n    const sortedArr = arr.slice().sort((a, b) => a - b);\r\n    const middleIndex = Math.floor(sortedArr.length / 2);\r\n\r\n    if (sortedArr.length % 2 === 0) {\r\n      return (sortedArr[middleIndex - 1] + sortedArr[middleIndex]) / 2;\r\n    } else {\r\n      return sortedArr[middleIndex];\r\n    }\r\n  };\r\n\r\n  // Utility function to calculate the mode of an array\r\n  calculateMode = (arr) => {\r\n    const frequencyMap = {};\r\n    let maxFrequency = 0;\r\n    let modes = [];\r\n\r\n    arr.forEach((value) => {\r\n      frequencyMap[value] = (frequencyMap[value] || 0) + 1;\r\n\r\n      if (frequencyMap[value] > maxFrequency) {\r\n        maxFrequency = frequencyMap[value];\r\n        modes = [value];\r\n      } else if (frequencyMap[value] === maxFrequency) {\r\n        modes.push(value);\r\n      }\r\n    });\r\n\r\n    return modes;\r\n  };\r\n\r\n  render() {\r\n    const { dataset } = this.props;\r\n\r\n    // Extract unique class values\r\n    const classes = [...new Set(dataset.map((item) => item.Alcohol))];\r\n\r\n    // Calculate class-wise mean, median, and mode of Flavanoids\r\n    const flavanoidsStats = classes.reduce((stats, cls) => {\r\n      const classData = dataset.filter((item) => item.Alcohol === cls);\r\n      const flavanoids = classData.map((item) => item.Flavanoids);\r\n\r\n      stats[cls] = {\r\n        mean: this.calculateMean(flavanoids),\r\n        median: this.calculateMedian(flavanoids),\r\n        mode: this.calculateMode(flavanoids),\r\n      };\r\n\r\n      return stats;\r\n    }, {});\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {classes.map((cls) => (\r\n              <th key={cls}>Class {cls}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids Mean</td>\r\n            {classes.map((cls) => (\r\n              <td key={cls}>{flavanoidsStats[cls].mean.toFixed(2)}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids Median</td>\r\n            {classes.map((cls) => (\r\n              <td key={cls}>{flavanoidsStats[cls].median.toFixed(2)}</td>\r\n            ))}\r\n          </tr>\r\n          <tr>\r\n            <td>Flavanoids Mode</td>\r\n            {classes.map((cls) => (\r\n              <td key={cls}>{flavanoidsStats[cls].mode.join(', ')}</td>\r\n            ))}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlavanoidsStats;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}