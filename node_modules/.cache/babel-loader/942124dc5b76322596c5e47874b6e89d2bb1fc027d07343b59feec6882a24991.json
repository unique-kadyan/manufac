{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GammaStatistics extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: [],\n      classStats: {}\n    };\n    this.loadData = () => {\n      // Load dataset from a JSON file (adjust the file path accordingly)\n      fetch('dataset.json').then(response => response.json()).then(data => {\n        const gammaData = this.calculateGamma(data);\n        const classStats = this.calculateClassStats(gammaData);\n        this.setState({\n          data: gammaData,\n          classStats\n        });\n      }).catch(error => {\n        console.error('Error loading dataset:', error);\n      });\n    };\n    this.calculateGamma = data => {\n      return data.map(point => {\n        const gamma = point.Ash * point.Hue / point.Magnesium;\n        return {\n          ...point,\n          Gamma: gamma\n        };\n      });\n    };\n    this.calculateClassStats = data => {\n      const stats = {};\n      data.forEach(point => {\n        const className = point.Class;\n        if (!stats[className]) {\n          stats[className] = [];\n        }\n        stats[className].push(point.Gamma);\n      });\n      return stats;\n    };\n    this.calculateMean = values => {\n      const sum = values.reduce((acc, val) => acc + val, 0);\n      return sum / values.length;\n    };\n    this.calculateMedian = values => {\n      const sortedValues = [...values].sort((a, b) => a - b);\n      const middleIndex = Math.floor(sortedValues.length / 2);\n      if (sortedValues.length % 2 === 0) {\n        return (sortedValues[middleIndex - 1] + sortedValues[middleIndex]) / 2;\n      } else {\n        return sortedValues[middleIndex];\n      }\n    };\n    this.calculateMode = values => {\n      const counts = {};\n      values.forEach(value => {\n        if (!counts[value]) {\n          counts[value] = 0;\n        }\n        counts[value]++;\n      });\n      let mode = null;\n      let maxCount = 0;\n      Object.entries(counts).forEach(_ref => {\n        let [value, count] = _ref;\n        if (count > maxCount) {\n          mode = value;\n          maxCount = count;\n        }\n      });\n      return mode;\n    };\n    this.renderTable = stats => {\n      const classColumns = Object.keys(stats).map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n        children: [\"Class \", className]\n      }, className, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this));\n      const tableRows = ['Mean', 'Median', 'Mode'].map(measure => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: measure\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), Object.values(stats).map((values, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: this[measure.toLowerCase()](values)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this))]\n      }, measure, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Measure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 13\n            }, this), classColumns]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Gamma\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this), tableRows]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.loadData();\n  }\n  render() {\n    const {\n      classStats\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.renderTable(classStats)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default GammaStatistics;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GammaStatistics","Component","constructor","arguments","state","data","classStats","loadData","fetch","then","response","json","gammaData","calculateGamma","calculateClassStats","setState","catch","error","console","map","point","gamma","Ash","Hue","Magnesium","Gamma","stats","forEach","className","Class","push","calculateMean","values","sum","reduce","acc","val","length","calculateMedian","sortedValues","sort","a","b","middleIndex","Math","floor","calculateMode","counts","value","mode","maxCount","Object","entries","_ref","count","renderTable","classColumns","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","tableRows","measure","index","toLowerCase","componentDidMount","render"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nclass GammaStatistics extends React.Component {\r\n  state = {\r\n    data: [],\r\n    classStats: {},\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  loadData = () => {\r\n    // Load dataset from a JSON file (adjust the file path accordingly)\r\n    fetch('dataset.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const gammaData = this.calculateGamma(data);\r\n        const classStats = this.calculateClassStats(gammaData);\r\n        this.setState({ data: gammaData, classStats });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error loading dataset:', error);\r\n      });\r\n  };\r\n\r\n  calculateGamma = (data) => {\r\n    return data.map((point) => {\r\n      const gamma = (point.Ash * point.Hue) / point.Magnesium;\r\n      return { ...point, Gamma: gamma };\r\n    });\r\n  };\r\n\r\n  calculateClassStats = (data) => {\r\n    const stats = {};\r\n    data.forEach((point) => {\r\n      const className = point.Class;\r\n      if (!stats[className]) {\r\n        stats[className] = [];\r\n      }\r\n      stats[className].push(point.Gamma);\r\n    });\r\n    return stats;\r\n  };\r\n\r\n  calculateMean = (values) => {\r\n    const sum = values.reduce((acc, val) => acc + val, 0);\r\n    return sum / values.length;\r\n  };\r\n\r\n  calculateMedian = (values) => {\r\n    const sortedValues = [...values].sort((a, b) => a - b);\r\n    const middleIndex = Math.floor(sortedValues.length / 2);\r\n    if (sortedValues.length % 2 === 0) {\r\n      return (sortedValues[middleIndex - 1] + sortedValues[middleIndex]) / 2;\r\n    } else {\r\n      return sortedValues[middleIndex];\r\n    }\r\n  };\r\n\r\n  calculateMode = (values) => {\r\n    const counts = {};\r\n    values.forEach((value) => {\r\n      if (!counts[value]) {\r\n        counts[value] = 0;\r\n      }\r\n      counts[value]++;\r\n    });\r\n\r\n    let mode = null;\r\n    let maxCount = 0;\r\n    Object.entries(counts).forEach(([value, count]) => {\r\n      if (count > maxCount) {\r\n        mode = value;\r\n        maxCount = count;\r\n      }\r\n    });\r\n\r\n    return mode;\r\n  };\r\n\r\n  renderTable = (stats) => {\r\n    const classColumns = Object.keys(stats).map((className) => (\r\n      <th key={className}>Class {className}</th>\r\n    ));\r\n\r\n    const tableRows = ['Mean', 'Median', 'Mode'].map((measure) => (\r\n      <tr key={measure}>\r\n        <td>{measure}</td>\r\n        {Object.values(stats).map((values, index) => (\r\n          <td key={index}>{this[measure.toLowerCase()](values)}</td>\r\n        ))}\r\n      </tr>\r\n    ));\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {classColumns}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Gamma</td>\r\n            {tableRows}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { classStats } = this.state;\r\n    return <div>{this.renderTable(classStats)}</div>;\r\n  }\r\n}\r\n\r\nexport default GammaStatistics;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}