{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Table() {\n  _s();\n  const [data, setData] = useState([]);\n\n  // Function to calculate mean\n  const calculateMean = array => {\n    const sum = array.reduce((acc, val) => acc + val, 0);\n    return sum / array.length;\n  };\n\n  // Function to calculate median\n  const calculateMedian = array => {\n    const sorted = array.sort((a, b) => a - b);\n    const middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n      return (sorted[middle - 1] + sorted[middle]) / 2;\n    }\n    return sorted[middle];\n  };\n\n  // Function to calculate mode\n  const calculateMode = array => {\n    const count = {};\n    array.forEach(value => {\n      if (count[value]) {\n        count[value]++;\n      } else {\n        count[value] = 1;\n      }\n    });\n    let mode = [];\n    let maxCount = 0;\n    for (const [key, value] of Object.entries(count)) {\n      if (value > maxCount) {\n        mode = [Number(key)];\n        maxCount = value;\n      } else if (value === maxCount) {\n        mode.push(Number(key));\n      }\n    }\n    return mode;\n  };\n  useEffect(() => {\n    // Import dataset\n    fetch('/dataset.json').then(response => response.json()).then(data => {\n      const classes = Array.from(new Set(data.map(item => item.Alcohol)));\n      const result = classes.reduce((acc, curr) => {\n        const classData = data.filter(item => item.Alcohol === curr);\n        const flavanoids = classData.map(item => item.Flavanoids);\n        const mean = calculateMean(flavanoids);\n        const median = calculateMedian(flavanoids);\n        const mode = calculateMode(flavanoids);\n        return {\n          ...acc,\n          [curr]: {\n            mean,\n            median,\n            mode\n          }\n        };\n      }, {});\n      setData(result);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), Object.keys(data).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Class \", key]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), Object.values(data).map((value, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: value.mean.toFixed(2)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), Object.values(data).map((value, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: value.median.toFixed(2)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), Object.values(data).map((value, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: value.mode.join(', ')\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(Table, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Table","_s","data","setData","calculateMean","array","sum","reduce","acc","val","length","calculateMedian","sorted","sort","a","b","middle","Math","floor","calculateMode","count","forEach","value","mode","maxCount","key","Object","entries","Number","push","fetch","then","response","json","classes","Array","from","Set","map","item","Alcohol","result","curr","classData","filter","flavanoids","Flavanoids","mean","median","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","values","index","toFixed","join","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Table() {\r\n  const [data, setData] = useState([]);\r\n\r\n  // Function to calculate mean\r\n  const calculateMean = (array) => {\r\n    const sum = array.reduce((acc, val) => acc + val, 0);\r\n    return sum / array.length;\r\n  };\r\n\r\n  // Function to calculate median\r\n  const calculateMedian = (array) => {\r\n    const sorted = array.sort((a, b) => a - b);\r\n    const middle = Math.floor(sorted.length / 2);\r\n    if (sorted.length % 2 === 0) {\r\n      return (sorted[middle - 1] + sorted[middle]) / 2;\r\n    }\r\n    return sorted[middle];\r\n  };\r\n\r\n  // Function to calculate mode\r\n  const calculateMode = (array) => {\r\n    const count = {};\r\n    array.forEach((value) => {\r\n      if (count[value]) {\r\n        count[value]++;\r\n      } else {\r\n        count[value] = 1;\r\n      }\r\n    });\r\n\r\n    let mode = [];\r\n    let maxCount = 0;\r\n    for (const [key, value] of Object.entries(count)) {\r\n      if (value > maxCount) {\r\n        mode = [Number(key)];\r\n        maxCount = value;\r\n      } else if (value === maxCount) {\r\n        mode.push(Number(key));\r\n      }\r\n    }\r\n\r\n    return mode;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Import dataset\r\n    fetch('/dataset.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const classes = Array.from(new Set(data.map((item) => item.Alcohol)));\r\n\r\n        const result = classes.reduce((acc, curr) => {\r\n          const classData = data.filter((item) => item.Alcohol === curr);\r\n          const flavanoids = classData.map((item) => item.Flavanoids);\r\n          const mean = calculateMean(flavanoids);\r\n          const median = calculateMedian(flavanoids);\r\n          const mode = calculateMode(flavanoids);\r\n\r\n          return {\r\n            ...acc,\r\n            [curr]: { mean, median, mode },\r\n          };\r\n        }, {});\r\n\r\n        setData(result);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {Object.keys(data).map((key) => (\r\n            <th key={key}>Class {key}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {Object.values(data).map((value, index) => (\r\n            <td key={index}>{value.mean.toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {Object.values(data).map((value, index) => (\r\n            <td key={index}>{value.median.toFixed(2)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {Object.values(data).map((value, index) => (\r\n            <td key={index}>{value.mode.join(', ')}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}