{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\n\n// Sample JSON dataset\nimport dataset from '../dataset.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calculateMean = (data, className) => {\n  const filteredData = data.filter(item => item.Alcohol === className);\n  const flavanoidsSum = filteredData.reduce((sum, item) => sum + item.Flavanoids, 0);\n  const mean = flavanoidsSum / filteredData.length;\n  return mean.toFixed(2);\n};\nconst calculateMedian = (data, className) => {\n  const filteredData = data.filter(item => item.Alcohol === className);\n  const sortedFlavanoids = filteredData.map(item => item.Flavanoids).sort();\n  const mid = Math.floor(sortedFlavanoids.length / 2);\n  const median = sortedFlavanoids.length % 2 === 0 ? (sortedFlavanoids[mid - 1] + sortedFlavanoids[mid]) / 2 : sortedFlavanoids[mid];\n  return median.toFixed(2);\n};\nconst calculateMode = (data, className) => {\n  const filteredData = data.filter(item => item.Alcohol === className);\n  const flavanoidsCountMap = {};\n  filteredData.forEach(item => {\n    if (flavanoidsCountMap[item.Flavanoids]) {\n      flavanoidsCountMap[item.Flavanoids]++;\n    } else {\n      flavanoidsCountMap[item.Flavanoids] = 1;\n    }\n  });\n  let mode = null;\n  let maxCount = 0;\n  Object.entries(flavanoidsCountMap).forEach(_ref => {\n    let [flavanoid, count] = _ref;\n    if (count > maxCount) {\n      mode = flavanoid;\n      maxCount = count;\n    }\n  });\n  return mode;\n};\nconst Table = () => {\n  const uniqueClasses = Array.from(new Set(dataset.map(item => item.Alcohol)));\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Measure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), uniqueClasses.map(className => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: className\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), uniqueClasses.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMean(dataset, className)\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Median\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), uniqueClasses.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMedian(dataset, className)\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Flavanoids Mode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), uniqueClasses.map(className => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: calculateMode(dataset, className)\n        }, className, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","dataset","jsxDEV","_jsxDEV","calculateMean","data","className","filteredData","filter","item","Alcohol","flavanoidsSum","reduce","sum","Flavanoids","mean","length","toFixed","calculateMedian","sortedFlavanoids","map","sort","mid","Math","floor","median","calculateMode","flavanoidsCountMap","forEach","mode","maxCount","Object","entries","_ref","flavanoid","count","Table","uniqueClasses","Array","from","Set","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Sample JSON dataset\r\nimport dataset from '../dataset.json';\r\n\r\nconst calculateMean = (data, className) => {\r\n  const filteredData = data.filter(item => item.Alcohol === className);\r\n  const flavanoidsSum = filteredData.reduce((sum, item) => sum + item.Flavanoids, 0);\r\n  const mean = flavanoidsSum / filteredData.length;\r\n  return mean.toFixed(2);\r\n};\r\n\r\nconst calculateMedian = (data, className) => {\r\n  const filteredData = data.filter(item => item.Alcohol === className);\r\n  const sortedFlavanoids = filteredData.map(item => item.Flavanoids).sort();\r\n  const mid = Math.floor(sortedFlavanoids.length / 2);\r\n  const median = sortedFlavanoids.length % 2 === 0\r\n    ? (sortedFlavanoids[mid - 1] + sortedFlavanoids[mid]) / 2\r\n    : sortedFlavanoids[mid];\r\n  return median.toFixed(2);\r\n};\r\n\r\nconst calculateMode = (data, className) => {\r\n  const filteredData = data.filter(item => item.Alcohol === className);\r\n  const flavanoidsCountMap = {};\r\n  filteredData.forEach(item => {\r\n    if (flavanoidsCountMap[item.Flavanoids]) {\r\n      flavanoidsCountMap[item.Flavanoids]++;\r\n    } else {\r\n      flavanoidsCountMap[item.Flavanoids] = 1;\r\n    }\r\n  });\r\n  let mode = null;\r\n  let maxCount = 0;\r\n  Object.entries(flavanoidsCountMap).forEach(([flavanoid, count]) => {\r\n    if (count > maxCount) {\r\n      mode = flavanoid;\r\n      maxCount = count;\r\n    }\r\n  });\r\n  return mode;\r\n};\r\n\r\nconst Table = () => {\r\n  const uniqueClasses = Array.from(new Set(dataset.map(item => item.Alcohol)));\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Measure</th>\r\n          {uniqueClasses.map(className => (\r\n            <th key={className}>{className}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Flavanoids Mean</td>\r\n          {uniqueClasses.map(className => (\r\n            <td key={className}>{calculateMean(dataset, className)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Median</td>\r\n          {uniqueClasses.map(className => (\r\n            <td key={className}>{calculateMedian(dataset, className)}</td>\r\n          ))}\r\n        </tr>\r\n        <tr>\r\n          <td>Flavanoids Mode</td>\r\n          {uniqueClasses.map(className => (\r\n            <td key={className}>{calculateMode(dataset, className)}</td>\r\n          ))}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}