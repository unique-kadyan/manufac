{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajes\\\\Documents\\\\Assignment\\\\assignment\\\\src\\\\components\\\\DatasetStats.jsx\";\nimport React from 'react';\nimport data from '../dataset.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FlavanoidsStats extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.calculateMean = flavanoidsData => {\n      const sum = flavanoidsData.reduce((acc, obj) => acc + obj.Flavanoids, 0);\n      return sum / flavanoidsData.length;\n    };\n    this.calculateMedian = flavanoidsData => {\n      const sortedData = flavanoidsData.map(obj => obj.Flavanoids).sort((a, b) => a - b);\n      const middle = Math.floor(sortedData.length / 2);\n      if (sortedData.length % 2 === 0) {\n        return (sortedData[middle - 1] + sortedData[middle]) / 2;\n      } else {\n        return sortedData[middle];\n      }\n    };\n    this.calculateMode = flavanoidsData => {\n      const counts = {};\n      let mode = [];\n      let maxCount = 0;\n      flavanoidsData.forEach(obj => {\n        const flavanoids = obj.Flavanoids;\n        counts[flavanoids] = (counts[flavanoids] || 0) + 1;\n        if (counts[flavanoids] > maxCount) {\n          mode = [flavanoids];\n          maxCount = counts[flavanoids];\n        } else if (counts[flavanoids] === maxCount) {\n          mode.push(flavanoids);\n        }\n      });\n      return mode;\n    };\n  }\n  render() {\n    const {\n      data\n    } = this.props;\n    const classWiseData = {};\n    data.forEach(obj => {\n      const alcoholClass = obj.Alcohol;\n      if (!classWiseData[alcoholClass]) {\n        classWiseData[alcoholClass] = [];\n      }\n      classWiseData[alcoholClass].push(obj);\n    });\n    const classWiseStats = Object.entries(classWiseData).map(_ref => {\n      let [alcoholClass, flavanoidsData] = _ref;\n      const mean = this.calculateMean(flavanoidsData);\n      const median = this.calculateMedian(flavanoidsData);\n      const mode = this.calculateMode(flavanoidsData).join(', ');\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: alcoholClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: mean\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: median\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: mode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, alcoholClass, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Measure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), Object.keys(classWiseData).map(alcoholClass => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: alcoholClass\n          }, alcoholClass, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"Flavanoids\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), classWiseStats]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n}\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Flavanoids Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlavanoidsStats, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","data","jsxDEV","_jsxDEV","FlavanoidsStats","Component","constructor","arguments","calculateMean","flavanoidsData","sum","reduce","acc","obj","Flavanoids","length","calculateMedian","sortedData","map","sort","a","b","middle","Math","floor","calculateMode","counts","mode","maxCount","forEach","flavanoids","push","render","props","classWiseData","alcoholClass","Alcohol","classWiseStats","Object","entries","_ref","mean","median","join","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","App","_c","$RefreshReg$"],"sources":["C:/Users/rajes/Documents/Assignment/assignment/src/components/DatasetStats.jsx"],"sourcesContent":["import React from 'react';\r\nimport data from '../dataset.json';\r\n\r\nclass FlavanoidsStats extends React.Component {\r\n  calculateMean = (flavanoidsData) => {\r\n    const sum = flavanoidsData.reduce((acc, obj) => acc + obj.Flavanoids, 0);\r\n    return sum / flavanoidsData.length;\r\n  };\r\n\r\n  calculateMedian = (flavanoidsData) => {\r\n    const sortedData = flavanoidsData.map((obj) => obj.Flavanoids).sort((a, b) => a - b);\r\n    const middle = Math.floor(sortedData.length / 2);\r\n    if (sortedData.length % 2 === 0) {\r\n      return (sortedData[middle - 1] + sortedData[middle]) / 2;\r\n    } else {\r\n      return sortedData[middle];\r\n    }\r\n  };\r\n\r\n  calculateMode = (flavanoidsData) => {\r\n    const counts = {};\r\n    let mode = [];\r\n    let maxCount = 0;\r\n\r\n    flavanoidsData.forEach((obj) => {\r\n      const flavanoids = obj.Flavanoids;\r\n      counts[flavanoids] = (counts[flavanoids] || 0) + 1;\r\n\r\n      if (counts[flavanoids] > maxCount) {\r\n        mode = [flavanoids];\r\n        maxCount = counts[flavanoids];\r\n      } else if (counts[flavanoids] === maxCount) {\r\n        mode.push(flavanoids);\r\n      }\r\n    });\r\n\r\n    return mode;\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    const classWiseData = {};\r\n    data.forEach((obj) => {\r\n      const alcoholClass = obj.Alcohol;\r\n      if (!classWiseData[alcoholClass]) {\r\n        classWiseData[alcoholClass] = [];\r\n      }\r\n      classWiseData[alcoholClass].push(obj);\r\n    });\r\n\r\n    const classWiseStats = Object.entries(classWiseData).map(([alcoholClass, flavanoidsData]) => {\r\n      const mean = this.calculateMean(flavanoidsData);\r\n      const median = this.calculateMedian(flavanoidsData);\r\n      const mode = this.calculateMode(flavanoidsData).join(', ');\r\n\r\n      return (\r\n        <tr key={alcoholClass}>\r\n          <td>{alcoholClass}</td>\r\n          <td>{mean}</td>\r\n          <td>{median}</td>\r\n          <td>{mode}</td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Measure</th>\r\n            {Object.keys(classWiseData).map((alcoholClass) => (\r\n              <th key={alcoholClass}>{alcoholClass}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Flavanoids</td>\r\n            {classWiseStats}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Flavanoids Statistics</h1>\r\n  <FlavanoidsStats data={data} />\r\n</div>\r\n);\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}